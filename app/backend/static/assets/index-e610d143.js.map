{"version":3,"mappings":"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","names":["appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","enableUnauthenticatedAccess","requireLogin","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","checkNotExpired","appServicesToken","currentDate","getAppServicesTokenFromMe","r","json","acc","item","token","isUsingAppServicesLogin","appServicesLogout","checkLoggedIn","client","getToken","error","getUsername","activeAccount","getTokenClaims","BACKEND_URI","getHeaders","idToken","adminUserEnvVarApi","respon","configApi","chatApi","request","shouldStream","url","headers","getSpeechApi","text","blob","getCitationFilePath","citation","uploadFileApi","deleteUploadedFileApi","filename","chatId","listUploadedFilesSingleChatApi","listAllUploadedFilesApi","RetrievalMode","GPT4VInput","VectorFieldOptions","getCompleteChatHistorySingleUserApi","getSingleChatHistoryApi","chat_id","updateChatHistoryAnswersApi","answers","title","updateChatHistoryApi","updateChatHistoryTitleApi","requestBody","deleteSingleChatHistoryApi","postChatHistoryApi","id","downloadSentFile","wordFile","fileURL","_filename","link","convertToFileEndpoint","htmlString","fileType","deleteDownloadedFileFromServer","endpoint","exportFile","onExportWord","answer","marked","onExportExcel","parseAnswerToHtml","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","jsx","AnswerIcon","Sparkle28Filled","formatters","lowercase","uppercase","datetime","number","currency","value","qualifiedLngFor","lng","options","supportedLngs","i18next","HttpApi","LanguageDetector","initReactI18next","enTranslation","deTranslation","esTranslation","frTranslation","jaTranslation","key","resolver","SpeechSynthesis","synth","getUtterance","lngCode","utterance","voice","SpeechOutputBrowser","t","i18n","useTranslation","currentLng","isPlaying","setIsPlaying","useState","startOrStopSpeech","color","IconButton","audio","SpeechOutputAzure","startOrStopAudio","Answer","isSelected","onExportWordClicked","onExportExcelClicked","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","onCopyClicked","showFollowupQuestions","showSpeechOutputAzure","showSpeechOutputBrowser","speechUrl","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","jsxs","Stack","styles","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","useCustomSpeechRecognition","SpeechRecognition","speechRecognition","SpeechInput","updateQuestion","isRecording","setIsRecording","startRecording","event","input","result","stopRecording","Fragment","Tooltip","Button","Mic28Filled","LoginContext","createContext","_","PromptButton","toggleMenu","buttonRef","loggedIn","iconSource","iconAlt","className","sendPromptDerWoche","promptText","recipient","subject","body","mailtoLink","QuestionInput","onSend","disabled","handlePlaceholder","placeholder","clearOnSend","initQuestion","showSpeechInput","toggleLoadPromptMenu","loadPromptButtonRef","toggleSavePromptMenu","savePromptButtonRef","questionHandler","question","textAreaRef","useRef","useContext","useEffect","textarea","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","disableRequiredAccessControl","e","UserChatMessage","message","TokenClaimsDisplay","instance","useMsal","claims","setClaims","ToString","a","items","o","originalKey","parts","columns","createTableColumn","b","Label","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","stackTokens","labelCalloutStackStyles","iconButtonStyles","iconProps","HelpCallout","props","isCalloutVisible","toggleIsCalloutVisible","useBoolean","descriptionId","useId","iconButtonId","Callout","DefaultButton","GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","useGPT4V","setUseGPT4V","vectorFieldOption","setVectorFieldOption","onuseGPT4V","checked","onSetGPT4VInput","option","data","useGPT4VId","useGPT4VFieldId","gpt4VInputId","gpt4VInputFieldId","Checkbox","Dropdown","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","defaultRetrievalMode","retrievalMode","setRetrievalMode","onRetrievalModeChange","onVectorFieldsChange","retrievalModeId","retrievalModeFieldId","vectorFieldsId","vectorFieldsFieldId","DeveloperSettings","promptTemplateId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","semanticCaptionsId","semanticCaptionsFieldId","suggestFollowupQuestionsId","suggestFollowupQuestionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","shouldStreamId","shouldStreamFieldId","onUseSemanticRankerChange","prevConfig","Panel","TextField","inputs","newRetrievalMode","parseSupportingContentItem","content","SupportingContent","supportingContent","textItems","imageItems","c","ind","parsed","img","AnalysisPanelTabs","ThoughtProcess","thoughts","k","SyntaxHighlighter","MarkdownViewer","src","setContent","isLoading","setIsLoading","setError","removeAnchorLinks","html","ancorLinksRegex","markdownText","parsedHtml","cleanedHtml","Spinner","SpinnerSize","MessageBar","MessageBarType","Link","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","fetchCitation","originalHash","citationContent","citationObjectUrl","renderFileViewer","Pivot","pivotItem","PivotItem","ClearChatButton","onClick","chatListToObject","messages","ChatManagerContext","ChatManagerProvider","children","setChatId","uuidv4","setAnswers","files","setFiles","isConfigPanelOpen","setIsConfigPanelOpen","streamedAnswers","setStreamedAnswers","allSidebarChats","setAllSidebarChats","allFiles","setAllFiles","updateSidebarChats","newChat","prevChats","addToAllFiles","newFile","updatedFiles","prevFiles","removeFromAllFiles","file","rest","useChatManager","context","UploadFile","setIsCalloutVisible","isUploading","setIsUploading","deletionStatus","setDeletionStatus","uploadedFile","setUploadedFile","uploadedFileError","setUploadedFileError","uploadedFiles","setUploadedFiles","handleButtonClick","listUploadedFiles","handleRemoveFile","handleUploadFile","formData","Add24Regular","Text","Delete24Regular","createNumberArray","n","LoadingTextAnimation","PromptMenuChoices","ClickableTextItem","handleClickOutsideDivElement","isElementOpen","elementRef","buttonWhichOpensElementRef","setIsElementOpen","DropDownMenu","menuPositionUnderneath","rect","menuPositionLeft","useOpenCloseMenu","menuRef","isDropdownMenuOpen","setIsDropdownMenuOpen","buttonRefDropdownMenu","handleClickOutside","ToggleButtons","optionSelected","toggleOptionSelected","toggleButtonChoices","Dot","ThreeDotsOptionButton","PromptMenuPages","allPrompts","prompt","PromptMenu","userPrompts","globalPrompts","toggleMenuSection","menuSectionSelected","handlePromptClick","handlePromptHovered","handlePromptUnhovered","deleteUserPrompt","getMenuPosition","useMenuSelected","setMenuSectionSelected","section","getPromptsApi","promptsType","dataResponse","addUserPromptsApi","generateHash","deleteUserPromptsApi","promptId","inputString","hashBuffer","byte","usePromptPlaceholder","setQuestion","setPlaceholder","previousQuestion","setPreviousQuestion","useGetPrompts","onlyGlobalPrompts","setOnlyGlobalPrompts","onlyUserPrompts","setOnlyUserPrompts","getPrompts","promptType","prompts","obj","useUpdateUserPrompts","reFetchPrompts","openSavePromptMenu","setOpenSavePromptMenu","promptName","prompt_id","resp","SavePromptMenu","onClose","onSave","reloadUserPrompts","name","setName","setPromptText","saveEnabled","setSaveEnabled","handleSave","useChatConfig","chatConfig","setChatConfig","config","useGptModelConfig","gptModelConfig","setGptModelConfig","prev","counter","Chat","useOutletContext","onChatStart","lastQuestionRef","chatMessageStreamEnd","setIsStreaming","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","updateGptModelConfig","speechUrls","setSpeechUrls","isPageVisibleRef","handleVisibilityChange","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","runningText","maxTextLen","readNDJSONStream","handleSavePrompt","makeApiRequest","parsedResponse","clearChat","chatsToDb","chat","_chatId","chatContainerRef","isUserAtBottom","setIsUserAtBottom","chatContainer","handleScroll","scrollTop","scrollHeight","clientHeight","onCopyAnswer","onShowCitation","onToggleTab","tab","Helmet","streamedAnswer","q","LoginButton","setLoggedIn","username","setUsername","handleLoginPopup","handleLogoutPopup","languageToCountryCode","LocaleSwitcher","onLanguageChange","handleLanguageChange","localeSwitcherId","currentCountryCode","code","details","ChatHistoryItem","pastChat","chatButtonRef","isEdit","setIsEdit","setTitle","inputRef","deleteChat","newChats","getChatMessages","chats","updateChatTitle","updatedChat","handleClickOnHistory","handleEdit","handleBlurOrEnter","changeTitleInFrontend","PasswordModal","isOpen","onRequestClose","onPasswordSubmit","password","setPassword","handleSubmit","Modal","SettingsButton","isModalOpen","setIsModalOpen","handlePasswordSubmit","Settings24Regular","HistoryRetrievedCodes","HistoryRetrievedCodes2","categorizeTimestamps","chatHistory","chatsToday","chatsLastWeek","chatsOlder","startOfToday","oneDay","startOfLastWeek","useChatHistory","historyRetrieved","setHistoryRetrieved","pastChatsCategorized","setPastChatsCategorized","categorizeChats","ChatHistorySection","sectionTitle","ChatHistory","isUserAdmin","setIsUserAdmin","getChatsOfUser","getFilesOfUserChats","adminUser","fetchUsername","Layout","menuOpen","setMenuOpen","isChatEmpty","setIsChatEmpty","handleChatStateChange","newLang","Outlet","LayoutWrapper","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/features/ChatHistory/services/chatHistoryApi.ts","../../../frontend/src/pages/answersToFile.tsx","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/i18n/formatters.tsx","../../../frontend/src/i18n/config.ts","../../../frontend/src/components/Answer/SpeechOutputBrowser.tsx","../../../frontend/src/components/Answer/SpeechOutputAzure.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/SpeechInput.tsx","../../../frontend/src/loginContext.tsx","../../../frontend/src/features/PromptDatabase/components/PromptButton/PromptButton.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/components/HelpCallout/HelpCallout.tsx","../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/components/DeveloperSettingsPanel/DeveloperSettingsPanel.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/MarkdownViewer/MarkdownViewer.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/contextProviderChat.tsx","../../../frontend/src/components/UploadFile/UploadFile.tsx","../../../frontend/src/utils/arrayUtils.ts","../../../frontend/src/components/Animations/LoadingTextAnimation.tsx","../../../frontend/src/features/PromptDatabase/models.ts","../../../frontend/src/components/ClickableTextItem/ClickableTextItem.tsx","../../../frontend/src/utils/mouseEvents.ts","../../../frontend/src/components/Menus/DropDownMenu.tsx","../../../frontend/src/components/Buttons/ToggleButton.tsx","../../../frontend/src/components/Buttons/OptionsButton.tsx","../../../frontend/src/features/PromptDatabase/components/PromptMenu/PromptMenu.tsx","../../../frontend/src/features/PromptDatabase/hooks/menuSelected.ts","../../../frontend/src/features/PromptDatabase/services/promptsApi.ts","../../../frontend/src/features/PromptDatabase/hooks/useLoadPrompts.ts","../../../frontend/src/features/PromptDatabase/hooks/useUpdateUserPrompt.ts","../../../frontend/src/features/PromptDatabase/components/SavePromptMenu/SavePromptMenu.tsx","../../../frontend/src/hooks/useChatConfig.ts","../../../frontend/src/hooks/useGptModelConfig.ts","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/i18n/LocaleSwitcher.tsx","../../../frontend/src/features/ChatHistory/components/ChatHistory/ChatHistoryItem.tsx","../../../frontend/src/components/SettingsButton/PasswordModal.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/features/ChatHistory/models.ts","../../../frontend/src/features/ChatHistory/hooks/useChatHistory.ts","../../../frontend/src/features/ChatHistory/components/ChatHistory/ChatHistory.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/layoutWrapper.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\r\n\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\n\r\nconst appServicesAuthTokenUrl = \".auth/me\";\r\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\r\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\r\n\r\ninterface AppServicesToken {\r\n    id_token: string;\r\n    access_token: string;\r\n    user_claims: Record<string, any>;\r\n    expires_on: string;\r\n}\r\n\r\ninterface AuthSetup {\r\n    // Set to true if login elements should be shown in the UI\r\n    useLogin: boolean;\r\n    // Set to true if access control is enforced by the application\r\n    requireAccessControl: boolean;\r\n    // Set to true if the application allows unauthenticated access (only applies for documents without access control)\r\n    enableUnauthenticatedAccess: boolean;\r\n    /**\r\n     * Configuration object to be passed to MSAL instance on creation.\r\n     * For a full list of MSAL.js configuration parameters, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n     */\r\n    msalConfig: {\r\n        auth: {\r\n            clientId: string; // Client app id used for login\r\n            authority: string; // Directory to use for login https://learn.microsoft.com/entra/identity-platform/msal-client-application-configuration#authority\r\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\r\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\r\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n        };\r\n        cache: {\r\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\r\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\r\n        };\r\n    };\r\n    loginRequest: {\r\n        /**\r\n         * Scopes you add here will be prompted for user consent during sign-in.\r\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n         * For more information about OIDC scopes, visit:\r\n         * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\r\n         */\r\n        scopes: Array<string>;\r\n    };\r\n    tokenRequest: {\r\n        scopes: Array<string>;\r\n    };\r\n}\r\n\r\n// Fetch the auth setup JSON data from the API if not already cached\r\nasync function fetchAuthSetup(): Promise<AuthSetup> {\r\n    const response = await fetch(\"/auth_setup\");\r\n    if (!response.ok) {\r\n        throw new Error(`auth setup response was not ok: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n}\r\n\r\nconst authSetup = await fetchAuthSetup();\r\n\r\nexport const useLogin = authSetup.useLogin;\r\n\r\nexport const requireAccessControl = authSetup.requireAccessControl;\r\n\r\nexport const enableUnauthenticatedAccess = authSetup.enableUnauthenticatedAccess;\r\n\r\nexport const requireLogin = requireAccessControl && !enableUnauthenticatedAccess;\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation.\r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n */\r\nexport const msalConfig = authSetup.msalConfig;\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit:\r\n * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\r\n */\r\nexport const loginRequest = authSetup.loginRequest;\r\n\r\nconst tokenRequest = authSetup.tokenRequest;\r\n\r\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\r\nexport const getRedirectUri = () => {\r\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\r\n};\r\n\r\n// Cache the app services token if it's available\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\r\ndeclare global {\r\n    var cachedAppServicesToken: AppServicesToken | null;\r\n}\r\nglobalThis.cachedAppServicesToken = null;\r\n\r\n/**\r\n * Retrieves an access token if the user is logged in using app services authentication.\r\n * Checks if the current token is expired and fetches a new token if necessary.\r\n * Returns null if the app doesn't support app services authentication.\r\n *\r\n * @returns {Promise<AppServicesToken | null>} A promise that resolves to an AppServicesToken if the user is authenticated, or null if authentication is not supported or fails.\r\n */\r\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\r\n    const checkNotExpired = (appServicesToken: AppServicesToken) => {\r\n        const currentDate = new Date();\r\n        const expiresOnDate = new Date(appServicesToken.expires_on);\r\n        return expiresOnDate > currentDate;\r\n    };\r\n\r\n    if (globalThis.cachedAppServicesToken && checkNotExpired(globalThis.cachedAppServicesToken)) {\r\n        return Promise.resolve(globalThis.cachedAppServicesToken);\r\n    }\r\n\r\n    const getAppServicesTokenFromMe: () => Promise<AppServicesToken | null> = () => {\r\n        return fetch(appServicesAuthTokenUrl).then(r => {\r\n            if (r.ok) {\r\n                return r.json().then(json => {\r\n                    if (json.length > 0) {\r\n                        console.log(\"APP SERVICES JSON\", json);\r\n                        return {\r\n                            id_token: json[0][\"id_token\"] as string,\r\n                            access_token: json[0][\"access_token\"] as string,\r\n                            user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\r\n                                acc[item.typ] = item.val;\r\n                                return acc;\r\n                            }, {}) as Record<string, any>,\r\n                            expires_on: json[0][\"expires_on\"] as string\r\n                        } as AppServicesToken;\r\n                    }\r\n\r\n                    return null;\r\n                });\r\n            }\r\n\r\n            return null;\r\n        });\r\n    };\r\n\r\n    return getAppServicesTokenFromMe().then(token => {\r\n        if (token) {\r\n            if (checkNotExpired(token)) {\r\n                globalThis.cachedAppServicesToken = token;\r\n                return token;\r\n            }\r\n\r\n            return fetch(appServicesAuthTokenRefreshUrl).then(r => {\r\n                if (r.ok) {\r\n                    return getAppServicesTokenFromMe();\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n\r\n        return null;\r\n    });\r\n};\r\n\r\nexport const isUsingAppServicesLogin = (await getAppServicesToken()) != null;\r\n\r\n// Sign out of app services\r\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\r\nexport const appServicesLogout = () => {\r\n    window.location.href = appServicesAuthLogoutUrl;\r\n};\r\n\r\n/**\r\n * Determines if the user is logged in either via the MSAL public client application or the app services login.\r\n * @param {IPublicClientApplication | undefined} client - The MSAL public client application instance, or undefined if not available.\r\n * @returns {Promise<boolean>} A promise that resolves to true if the user is logged in, false otherwise.\r\n */\r\nexport const checkLoggedIn = async (client: IPublicClientApplication | undefined): Promise<boolean> => {\r\n    if (client) {\r\n        const activeAccount = client.getActiveAccount();\r\n        if (activeAccount) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n// Get an access token for use with the API server.\r\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\r\n// Use the access token from app services login if available\r\nexport const getToken = async (client: IPublicClientApplication): Promise<string | undefined> => {\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return Promise.resolve(appServicesToken.access_token);\r\n    }\r\n\r\n    return client\r\n        .acquireTokenSilent({\r\n            ...tokenRequest,\r\n            redirectUri: getRedirectUri()\r\n        })\r\n        .then(r => r.accessToken)\r\n        .catch(error => {\r\n            console.log(error);\r\n            return undefined;\r\n        });\r\n};\r\n\r\n/**\r\n * Retrieves the username of the active account.\r\n * If no active account is found, attempts to retrieve the username from the app services login token if available.\r\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\r\n * @returns {Promise<string | null>} The username of the active account, or null if no username is found.\r\n */\r\nexport const getUsername = async (client: IPublicClientApplication): Promise<string | null> => {\r\n    const activeAccount = client.getActiveAccount();\r\n    if (activeAccount) {\r\n        console.log(\"username from activeAccount: \", activeAccount);\r\n        return activeAccount.username;\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken?.user_claims) {\r\n        console.log(\"username from appServicesToken: \", appServicesToken.user_claims);\r\n        return appServicesToken.user_claims.preferred_username;\r\n    }\r\n    console.log(\"null username\");\r\n    return null;\r\n};\r\n\r\n/**\r\n * Retrieves the token claims of the active account.\r\n * If no active account is found, attempts to retrieve the token claims from the app services login token if available.\r\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\r\n * @returns {Promise<Record<string, unknown> | undefined>} A promise that resolves to the token claims of the active account, the user claims from the app services login token, or undefined if no claims are found.\r\n */\r\nexport const getTokenClaims = async (client: IPublicClientApplication): Promise<Record<string, unknown> | undefined> => {\r\n    const activeAccount = client.getActiveAccount();\r\n    if (activeAccount) {\r\n        return activeAccount.idTokenClaims;\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return appServicesToken.user_claims;\r\n    }\r\n\r\n    return undefined;\r\n};\r\n","const BACKEND_URI = \"\";\r\n\r\nimport { ChatAppRequest, Config, SimpleAPIResponse } from \"./models\";\r\nimport { useLogin, isUsingAppServicesLogin } from \"../authConfig\";\r\nimport { AdminUserResponse } from \"./models\";\r\nimport { AllFiles } from \"../contextProviderChat\";\r\n\r\nexport async function getHeaders(idToken: string | undefined): Promise<Record<string, string>> {\r\n    // If using login and not using app services, add the id token of the logged in account as the authorization\r\n    if (useLogin && !isUsingAppServicesLogin) {\r\n        if (idToken) {\r\n            return { Authorization: `Bearer ${idToken}` };\r\n        }\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nexport async function adminUserEnvVarApi(): Promise<AdminUserResponse> {\r\n    const response = await fetch(\"/admin_user\", {\r\n        method: \"GET\"\r\n    });\r\n    const respon = await response.json();\r\n    console.log(\"Response of admin user api\", respon);\r\n    return respon as AdminUserResponse;\r\n}\r\n\r\nexport async function configApi(): Promise<Config> {\r\n    const response = await fetch(`${BACKEND_URI}/config`, {\r\n        method: \"GET\"\r\n    });\r\n\r\n    return (await response.json()) as Config;\r\n}\r\n\r\nexport async function chatApi(request: ChatAppRequest, shouldStream: boolean, idToken: string | undefined): Promise<Response> {\r\n    let url = `${BACKEND_URI}/chat`;\r\n    if (shouldStream) {\r\n        url += \"/stream\";\r\n    }\r\n    const headers = await getHeaders(idToken);\r\n    console.log(\"Sending Chat request\");\r\n    return await fetch(url, {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(request)\r\n    });\r\n}\r\n\r\nexport async function getSpeechApi(text: string): Promise<string | null> {\r\n    return await fetch(\"/speech\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            text: text\r\n        })\r\n    })\r\n        .then(response => {\r\n            if (response.status == 200) {\r\n                return response.blob();\r\n            } else if (response.status == 400) {\r\n                console.log(\"Speech synthesis is not enabled.\");\r\n                return null;\r\n            } else {\r\n                console.error(\"Unable to get speech synthesis.\");\r\n                return null;\r\n            }\r\n        })\r\n        .then(blob => (blob ? URL.createObjectURL(blob) : null));\r\n}\r\n\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `${BACKEND_URI}/content/${citation}`;\r\n}\r\n\r\nexport async function uploadFileApi(request: FormData, idToken: string): Promise<SimpleAPIResponse> {\r\n    const response = await fetch(\"/upload\", {\r\n        method: \"POST\",\r\n        headers: await getHeaders(idToken),\r\n        body: request\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Uploading files failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: SimpleAPIResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function deleteUploadedFileApi(filename: string, chatId: string, idToken: string): Promise<SimpleAPIResponse> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(\"/upload\", {\r\n        method: \"DELETE\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ filename, chatId })\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Deleting file failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: SimpleAPIResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function listUploadedFilesSingleChatApi(chatId: string, idToken: string): Promise<string[]> {\r\n    const response = await fetch(`/list_uploaded/${chatId}`, {\r\n        method: \"GET\",\r\n        headers: await getHeaders(idToken)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Listing files failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: string[] = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function listAllUploadedFilesApi(idToken: string): Promise<AllFiles> {\r\n    const response = await fetch(`/list_uploaded`, {\r\n        method: \"GET\",\r\n        headers: await getHeaders(idToken)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Listing files failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: AllFiles = await response.json();\r\n    return dataResponse;\r\n}\r\n","export const enum RetrievalMode {\r\n    Hybrid = \"hybrid\",\r\n    Vectors = \"vectors\",\r\n    Text = \"text\"\r\n}\r\n\r\nexport const enum GPT4VInput {\r\n    TextAndImages = \"textAndImages\",\r\n    Images = \"images\",\r\n    Texts = \"texts\"\r\n}\r\n\r\nexport const enum VectorFieldOptions {\r\n    Embedding = \"embedding\",\r\n    ImageEmbedding = \"imageEmbedding\",\r\n    Both = \"both\"\r\n}\r\n\r\nexport type ChatAppRequestOverrides = {\r\n    retrieval_mode?: RetrievalMode;\r\n    semantic_ranker?: boolean;\r\n    semantic_captions?: boolean;\r\n    exclude_category?: string;\r\n    seed?: number;\r\n    top?: number;\r\n    temperature?: number;\r\n    minimum_search_score?: number;\r\n    minimum_reranker_score?: number;\r\n    prompt_template?: string;\r\n    suggest_followup_questions?: boolean;\r\n    use_oid_security_filter?: boolean;\r\n    use_groups_security_filter?: boolean;\r\n    use_gpt4v?: boolean;\r\n    gpt4v_input?: GPT4VInput;\r\n    vector_fields: VectorFieldOptions[];\r\n};\r\n\r\nexport type ResponseMessage = {\r\n    content: string;\r\n    role: string;\r\n};\r\n\r\nexport type Thoughts = {\r\n    title: string;\r\n    description: any; // It can be any output from the api\r\n    props?: { [key: string]: string };\r\n};\r\n\r\nexport type ResponseContext = {\r\n    data_points: string[];\r\n    followup_questions: string[] | null;\r\n    thoughts: Thoughts[];\r\n};\r\n\r\nexport type ChatAppResponseOrError = {\r\n    message: ResponseMessage;\r\n    delta: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n    error?: string;\r\n};\r\n\r\nexport type ChatAppResponse = {\r\n    message: ResponseMessage;\r\n    delta: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type ChatAppRequestContext = {\r\n    overrides?: ChatAppRequestOverrides;\r\n    chatId: string;\r\n};\r\n\r\nexport type ChatAppRequest = {\r\n    messages: ResponseMessage[];\r\n    context?: ChatAppRequestContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type Config = {\r\n    showGPT4VOptions: boolean;\r\n    useSemanticRanker: boolean;\r\n    showVectorOption: boolean;\r\n    showUserUpload: boolean;\r\n    showSpeechInput: boolean;\r\n    showSpeechOutputBrowser: boolean;\r\n    showSpeechOutputAzure: boolean;\r\n};\r\n\r\nexport type gptModelSettings = {\r\n    temperature: number;\r\n    seed: number | null;\r\n    minimumSearchScore: number;\r\n    minimumRerankerScore: number;\r\n    retrieveCount: number;\r\n    excludeCategory: string;\r\n    useSemanticCaptions: boolean;\r\n    useSuggestFollowupQuestions: boolean;\r\n    useOidSecurityFilter: boolean;\r\n    useGroupsSecurityFilter: boolean;\r\n    shouldStream: boolean;\r\n    useGPT4V: boolean;\r\n    gpt4vInput: GPT4VInput;\r\n    vectorFieldList: VectorFieldOptions[];\r\n    promptTemplate: string;\r\n};\r\n\r\nexport type SimpleAPIResponse = {\r\n    message?: string;\r\n    filename?: string;\r\n};\r\n\r\nexport type HistoryApiResponse = {\r\n    id: string;\r\n    entra_oid: string;\r\n    title: string;\r\n    answers: any;\r\n    timestamp: number;\r\n};\r\n\r\nexport type AdminUserResponse = {\r\n    user: string;\r\n};\r\n","import { ChatAppResponse } from \"../../../api/models\";\nimport { getHeaders } from \"../../../api/api\";\nimport { ChatHistoryDbResponse, ConversationChatHistoryDbResponse } from \"../models\";\n\nexport async function getCompleteChatHistorySingleUserApi(idToken: string): Promise<ChatHistoryDbResponse[]> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`/chats`, {\n        method: \"GET\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Getting chat history failed: ${response}`);\n    }\n\n    const dataResponse: ChatHistoryDbResponse[] = await response.json();\n    return dataResponse;\n}\n\nexport async function getSingleChatHistoryApi(idToken: string, chat_id: string): Promise<ConversationChatHistoryDbResponse[]> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`/chats/${chat_id}`, {\n        method: \"GET\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Getting chat failed: ${response}`);\n    }\n\n    const dataResponse: ConversationChatHistoryDbResponse[] = await response.json();\n    return dataResponse;\n}\n\nexport async function updateChatHistoryAnswersApi(\n    idToken: string,\n    chatId: string,\n    answers: [user: string, response: ChatAppResponse][],\n    title: string\n): Promise<ChatHistoryDbResponse> {\n    const id = chatId;\n    return await updateChatHistoryApi(idToken, JSON.stringify({ answers, id }));\n}\n\nexport async function updateChatHistoryTitleApi(idToken: string, chatId: string, title: string): Promise<ChatHistoryDbResponse> {\n    const id = chatId;\n    return await updateChatHistoryApi(idToken, JSON.stringify({ title, id }));\n}\n\nexport async function updateChatHistoryApi(idToken: string, requestBody: string): Promise<ChatHistoryDbResponse> {\n    const headers = await getHeaders(idToken);\n    const response = await fetch(`/chats`, {\n        method: \"PUT\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: requestBody\n    });\n\n    if (!response.ok) {\n        throw new Error(`Updating chat history failed: ${response}`);\n    }\n\n    const dataResponse = await response.json();\n    return dataResponse as ChatHistoryDbResponse;\n}\n\nexport async function deleteSingleChatHistoryApi(idToken: string, chat_id: string): Promise<Response> {\n    const headers = await getHeaders(idToken);\n    const path = chat_id;\n    const response = await fetch(`/chats/${path}`, {\n        method: \"DELETE\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        console.log(response);\n        throw new Error(`Deleting chat failed:`);\n    }\n\n    return response;\n}\n\nexport async function postChatHistoryApi(\n    idToken: string,\n    chatId: string,\n    answers: [user: string, response: ChatAppResponse][]\n): Promise<ChatHistoryDbResponse> {\n    const headers = await getHeaders(idToken);\n    const id = chatId;\n    const response = await fetch(`/chats`, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ answers, id })\n    });\n\n    if (!response.ok) {\n        throw new Error(`Posting chat history failed: ${response}`);\n    }\n\n    const dataResponse = await response.json();\n    return dataResponse as ChatHistoryDbResponse;\n}\n","import { ChatAppResponse } from \"../api\";\nimport { marked } from \"marked\";\n\nexport async function downloadSentFile(response: Response) {\n    const wordFile = await response.blob();\n    const fileURL = window.URL.createObjectURL(wordFile);\n    const _filename = response.headers.get(\"content-disposition\")?.split(\"filename=\")[1];\n    if (_filename) {\n        const filename = _filename.replace(/\"/g, \"\");\n        const link = document.createElement(\"a\");\n        link.href = fileURL;\n        link.download = filename;\n        link.click();\n\n        window.URL.revokeObjectURL(fileURL);\n    }\n}\n\nexport async function convertToFileEndpoint(htmlString: string, fileType: string) {\n    const acceptedFileTypes = [\"word\", \"excel\"];\n    if (!acceptedFileTypes.includes(fileType)) {\n        throw new Error(`Given file type: '${fileType}' not valid or supported`);\n    }\n    const response = await fetch(`/convert_to_${fileType}`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            html: htmlString\n        })\n    });\n\n    if (!response.ok) {\n        throw new Error(`Converting to ${fileType} doc failed: ${response.statusText}`);\n    }\n\n    return response;\n}\n\nexport async function deleteDownloadedFileFromServer(endpoint: string) {\n    const response = await fetch(`/${endpoint}`, { method: \"GET\" });\n\n    if (!response.ok) {\n        throw new Error(`Deleting file failed: ${response.statusText}`);\n    }\n\n    return response;\n}\n\nexport const exportFile = async (htmlString: string, fileType: string) => {\n    const response = await convertToFileEndpoint(htmlString, fileType);\n    await downloadSentFile(response);\n    const deletedResponse = await deleteDownloadedFileFromServer(`delete_${fileType}_file`);\n    if (deletedResponse.ok) {\n        console.log(`Deleted ${fileType} file after downloading`);\n    } else {\n        console.log(`Failed to delete ${fileType} file after downloading`);\n    }\n};\n\nexport const onExportWord = async (answer: ChatAppResponse) => {\n    const htmlString = marked.parse(answer.message.content) as string;\n    await exportFile(htmlString, \"word\");\n};\n\nexport const onExportExcel = async (answer: ChatAppResponse) => {\n    var htmlString: string;\n    // had bugs where the LLM returns html code instead of markdown and thus needs to be pre-processed differently\n    if (answer.message.content.includes(\"```\")) {\n        htmlString = answer.message.content;\n    } else {\n        htmlString = marked.parse(answer.message.content) as string;\n    }\n    await exportFile(htmlString, \"excel\");\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: string[];\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: string[] = [];\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    let parsedAnswer = answer.trim();\r\n\r\n    // Omit a citation that is still being typed during streaming\r\n    if (isStreaming) {\r\n        let lastIndex = parsedAnswer.length;\r\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\r\n            if (parsedAnswer[i] === \"]\") {\r\n                break;\r\n            } else if (parsedAnswer[i] === \"[\") {\r\n                lastIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\r\n        parsedAnswer = truncatedAnswer;\r\n    }\r\n\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 2 === 0) {\r\n            return part;\r\n        } else {\r\n            let citationIndex: number;\r\n            if (citations.indexOf(part) !== -1) {\r\n                citationIndex = citations.indexOf(part) + 1;\r\n            } else {\r\n                citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"#66b5c3\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","export default {\r\n    lowercase,\r\n    uppercase,\r\n    datetime,\r\n    number,\r\n    currency\r\n} as const;\r\n\r\nexport function lowercase(value: string) {\r\n    return value.toLowerCase();\r\n}\r\n\r\nexport function uppercase(value: string) {\r\n    return value.toUpperCase();\r\n}\r\n\r\n/**\r\n * Returns the default qualified locale code\r\n * (language-REGION) for the given locale.\r\n *\r\n * @param lng The locale code.\r\n * @returns The qualified locale code, including region.\r\n */\r\nfunction qualifiedLngFor(lng: string): string {\r\n    switch (lng) {\r\n        case \"en\":\r\n            return \"en-US\";\r\n        case \"de\":\r\n            return \"de-DE\";\r\n        case \"es\":\r\n            return \"es-ES\";\r\n        case \"fr\":\r\n            return \"fr-FR\";\r\n        /* case \"ja\":\r\n            return \"ja-JP\"; */\r\n        default:\r\n            return lng;\r\n    }\r\n}\r\n\r\n/**\r\n * Formats a datetime.\r\n *\r\n * @param value - The datetime to format.\r\n * @param lng - The language to format the number in.\r\n * @param options - passed to Intl.DateTimeFormat.\r\n * @returns The formatted datetime.\r\n */\r\nexport function datetime(value: Date | number, lng: string | undefined, options?: Intl.DateTimeFormatOptions): string {\r\n    return new Intl.DateTimeFormat(qualifiedLngFor(lng!), options).format(value);\r\n}\r\n\r\n/**\r\n * Formats a number.\r\n *\r\n * @param value - The number to format.\r\n * @param lng - The language to format the number in.\r\n * @param options - passed to Intl.NumberFormat.\r\n * @returns The formatted number.\r\n */\r\nexport function number(value: number, lng: string | undefined, options?: Intl.NumberFormatOptions): string {\r\n    return new Intl.NumberFormat(qualifiedLngFor(lng!), options).format(value);\r\n}\r\n\r\n/**\r\n * Formats a number as currency.\r\n *\r\n * @param value - The number to format.\r\n * @param lng - The language to format the number in.\r\n * @param options - passed to Intl.NumberFormat.\r\n * @returns The formatted currency string.\r\n */\r\nexport function currency(value: number, lng: string | undefined, options?: Intl.NumberFormatOptions): string {\r\n    return number(value, lng, {\r\n        style: \"currency\",\r\n        ...options\r\n    });\r\n}\r\n","import i18next from \"i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport HttpApi from \"i18next-http-backend\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport formatters from \"./formatters\";\r\nimport enTranslation from \"../locales/en/translation.json\";\r\nimport deTranslation from \"../locales/de/translation.json\";\r\nimport esTranslation from \"../locales/es/translation.json\";\r\nimport jaTranslation from \"../locales/ja/translation.json\";\r\nimport frTranslation from \"../locales/fr/translation.json\";\r\n\r\nexport const supportedLngs: { [key: string]: { name: string; locale: string } } = {\r\n    en: {\r\n        name: \"English\",\r\n        locale: \"en-US\"\r\n    },\r\n    de: {\r\n        name: \"Deutsch\",\r\n        locale: \"de-DE\"\r\n    },\r\n    es: {\r\n        name: \"Español\",\r\n        locale: \"es-ES\"\r\n    },\r\n    fr: {\r\n        name: \"Français\",\r\n        locale: \"fr-FR\"\r\n    }\r\n    /*  ja: {\r\n        name: \"日本語\",\r\n        locale: \"ja-JP\"\r\n    } */\r\n};\r\n\r\ni18next\r\n    .use(HttpApi)\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next)\r\n    // init i18next\r\n    // for all options read: https://www.i18next.com/overview/configuration-options\r\n    .init({\r\n        resources: {\r\n            en: { translation: enTranslation },\r\n            de: { translation: deTranslation },\r\n            es: { translation: esTranslation },\r\n            fr: { translation: frTranslation },\r\n            ja: { translation: jaTranslation }\r\n        },\r\n        fallbackLng: \"de\",\r\n        supportedLngs: Object.keys(supportedLngs),\r\n        debug: import.meta.env.DEV,\r\n        interpolation: {\r\n            escapeValue: false // not needed for react as it escapes by default\r\n        }\r\n    });\r\n\r\nObject.entries(formatters).forEach(([key, resolver]) => {\r\n    i18next.services.formatter?.add(key, resolver);\r\n});\r\n\r\nexport default i18next;\r\n","import { useState } from \"react\";\r\nimport { IconButton } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { supportedLngs } from \"../../i18n/config\";\r\n\r\ninterface Props {\r\n    answer: string;\r\n}\r\n\r\nconst SpeechSynthesis = (window as any).speechSynthesis || (window as any).webkitSpeechSynthesis;\r\n\r\nlet synth: SpeechSynthesis | null = null;\r\n\r\ntry {\r\n    synth = SpeechSynthesis;\r\n} catch (err) {\r\n    console.error(\"SpeechSynthesis is not supported\");\r\n}\r\n\r\nconst getUtterance = function (text: string, lngCode: string) {\r\n    if (synth) {\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.lang = lngCode;\r\n        utterance.volume = 1;\r\n        utterance.rate = 1;\r\n        utterance.pitch = 1;\r\n        utterance.voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === lngCode)[0];\r\n        return utterance;\r\n    }\r\n};\r\n\r\nexport const SpeechOutputBrowser = ({ answer }: Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    const currentLng = i18n.language;\r\n    let lngCode = supportedLngs[currentLng]?.locale;\r\n    if (!lngCode) {\r\n        lngCode = \"en-US\";\r\n    }\r\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n\r\n    const startOrStopSpeech = (answer: string) => {\r\n        if (synth != null) {\r\n            if (isPlaying) {\r\n                synth.cancel(); // removes all utterances from the utterance queue.\r\n                setIsPlaying(false);\r\n                return;\r\n            }\r\n            const utterance: SpeechSynthesisUtterance | undefined = getUtterance(answer, lngCode);\r\n\r\n            if (!utterance) {\r\n                return;\r\n            }\r\n\r\n            synth.speak(utterance);\r\n\r\n            utterance.onstart = () => {\r\n                setIsPlaying(true);\r\n                return;\r\n            };\r\n\r\n            utterance.onend = () => {\r\n                setIsPlaying(false);\r\n                return;\r\n            };\r\n        }\r\n    };\r\n    const color = isPlaying ? \"red\" : \"black\";\r\n\r\n    return (\r\n        <IconButton\r\n            style={{ color: color }}\r\n            iconProps={{ iconName: \"Volume3\" }}\r\n            title={t(\"tooltips.speakAnswer\")}\r\n            ariaLabel=\"Speak answer\"\r\n            onClick={() => startOrStopSpeech(answer)}\r\n            disabled={!synth}\r\n        />\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { IconButton } from \"@fluentui/react\";\r\n\r\ninterface Props {\r\n    url: string | null;\r\n}\r\n\r\nlet audio = new Audio();\r\n\r\nexport const SpeechOutputAzure = ({ url }: Props) => {\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const { t } = useTranslation();\r\n\r\n    const startOrStopAudio = async () => {\r\n        if (isPlaying) {\r\n            audio.pause();\r\n            setIsPlaying(false);\r\n            return;\r\n        }\r\n\r\n        if (!url) {\r\n            console.error(\"Speech output is not yet available.\");\r\n            return;\r\n        }\r\n        audio = new Audio(url);\r\n        await audio.play();\r\n        audio.addEventListener(\"ended\", () => {\r\n            setIsPlaying(false);\r\n        });\r\n        setIsPlaying(true);\r\n    };\r\n\r\n    const color = isPlaying ? \"red\" : \"black\";\r\n    return (\r\n        <IconButton\r\n            style={{ color: color }}\r\n            iconProps={{ iconName: \"Volume3\" }}\r\n            title={t(\"tooltips.speakAnswer\")}\r\n            ariaLabel=\"Speak answer\"\r\n            onClick={() => startOrStopAudio()}\r\n            disabled={!url}\r\n        />\r\n    );\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\nimport { SpeechOutputBrowser } from \"./SpeechOutputBrowser\";\r\nimport { SpeechOutputAzure } from \"./SpeechOutputAzure\";\r\nimport { marked } from \"marked\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface Props {\r\n    answer: ChatAppResponse;\r\n    isSelected?: boolean;\r\n    isStreaming: boolean;\r\n    onExportWordClicked: () => void;\r\n    onExportExcelClicked: () => void;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onCopyClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    showFollowupQuestions?: boolean;\r\n    showSpeechOutputBrowser?: boolean;\r\n    showSpeechOutputAzure?: boolean;\r\n    speechUrl: string | null;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    isSelected,\r\n    isStreaming,\r\n    onExportWordClicked,\r\n    onExportExcelClicked,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    onCopyClicked,\r\n    showFollowupQuestions,\r\n    showSpeechOutputAzure,\r\n    showSpeechOutputBrowser,\r\n    speechUrl\r\n}: Props) => {\r\n    const followupQuestions = answer.context?.followup_questions;\r\n    const messageContent = answer.message.content;\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\r\n    const { t } = useTranslation();\r\n\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"WordDocument\" }}\r\n                            title={t(\"answerButtons.wordExport\")}\r\n                            ariaLabel={t(\"answerButtons.wordExport\")}\r\n                            onClick={() => onExportWordClicked()}\r\n                            disabled={!answer.message.content?.length}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ExcelDocument\" }}\r\n                            title={t(\"answerButtons.excelExport\")}\r\n                            ariaLabel={t(\"answerButtons.excelExport\")}\r\n                            onClick={() => onExportExcelClicked()}\r\n                            disabled={!answer.message.content?.length}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title={t(\"answerButtons.thoughtProcess\")}\r\n                            ariaLabel={t(\"answerButtons.thoughtProcess\")}\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.context.thoughts?.length}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ClipboardList\" }}\r\n                            title={t(\"answerButtons.supportingContent\")}\r\n                            ariaLabel={t(\"answerButtons.supportingContent\")}\r\n                            onClick={() => onSupportingContentClicked()}\r\n                            disabled={!answer.context.data_points}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Copy\" }}\r\n                            title={t(\"answerButtons.copy\")}\r\n                            ariaLabel={t(\"answerButtons.copy\")}\r\n                            onClick={() => onCopyClicked()}\r\n                            disabled={!answer.context.data_points}\r\n                        />\r\n                        {showSpeechOutputAzure && <SpeechOutputAzure url={speechUrl} />}\r\n                        {showSpeechOutputBrowser && <SpeechOutputBrowser answer={sanitizedAnswerHtml} />}\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: marked.parse(sanitizedAnswerHtml) as string }}></div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>Citations:</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            const path = getCitationFilePath(x);\r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\r\n                                    {`${++i}. ${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\r\n                        {followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const { t, i18n } = useTranslation();\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        {t(\"generatingAnswer\")}\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { SetStateAction, useState } from \"react\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { Mic28Filled } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./QuestionInput.module.css\";\r\nimport { supportedLngs } from \"../../i18n/config\";\r\n\r\ninterface Props {\r\n    updateQuestion: (question: string) => void;\r\n}\r\n\r\nconst useCustomSpeechRecognition = () => {\r\n    const { i18n } = useTranslation();\r\n    const currentLng = i18n.language;\r\n    let lngCode = supportedLngs[currentLng]?.locale;\r\n    if (!lngCode) {\r\n        lngCode = \"en-US\";\r\n    }\r\n\r\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\r\n    let speechRecognition: {\r\n        continuous: boolean;\r\n        lang: string;\r\n        interimResults: boolean;\r\n        maxAlternatives: number;\r\n        start: () => void;\r\n        onresult: (event: { results: { transcript: SetStateAction<string> }[][] }) => void;\r\n        onend: () => void;\r\n        onerror: (event: { error: string }) => void;\r\n        stop: () => void;\r\n    } | null = null;\r\n\r\n    try {\r\n        speechRecognition = new SpeechRecognition();\r\n        if (speechRecognition != null) {\r\n            speechRecognition.lang = lngCode;\r\n            speechRecognition.interimResults = true;\r\n        }\r\n    } catch (err) {\r\n        console.error(\"SpeechRecognition not supported\");\r\n        speechRecognition = null;\r\n    }\r\n\r\n    return speechRecognition;\r\n};\r\n\r\nexport const SpeechInput = ({ updateQuestion }: Props) => {\r\n    let speechRecognition = useCustomSpeechRecognition();\r\n    const { t } = useTranslation();\r\n    const [isRecording, setIsRecording] = useState<boolean>(false);\r\n    const startRecording = () => {\r\n        if (speechRecognition == null) {\r\n            console.error(\"SpeechRecognition not supported\");\r\n            return;\r\n        }\r\n\r\n        speechRecognition.onresult = (event: { results: { transcript: SetStateAction<string> }[][] }) => {\r\n            let input = \"\";\r\n            for (const result of event.results) {\r\n                input += result[0].transcript;\r\n            }\r\n            updateQuestion(input);\r\n        };\r\n        speechRecognition.onend = () => {\r\n            // NOTE: In some browsers (e.g. Chrome), the recording will stop automatically after a few seconds of silence.\r\n            setIsRecording(false);\r\n        };\r\n        speechRecognition.onerror = (event: { error: string }) => {\r\n            if (speechRecognition) {\r\n                speechRecognition.stop();\r\n                if (event.error == \"no-speech\") {\r\n                    alert(\"No speech was detected. Please check your system audio settings and try again.\");\r\n                } else if (event.error == \"language-not-supported\") {\r\n                    alert(\r\n                        `Speech recognition error detected: ${event.error}. The speech recognition input functionality does not yet work on all browsers, like Edge in Mac OS X with ARM chips. Try another browser/OS.`\r\n                    );\r\n                } else {\r\n                    alert(`Speech recognition error detected: ${event.error}.`);\r\n                }\r\n            }\r\n        };\r\n\r\n        setIsRecording(true);\r\n        speechRecognition.start();\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (speechRecognition == null) {\r\n            console.error(\"SpeechRecognition not supported\");\r\n            return;\r\n        }\r\n        speechRecognition.stop();\r\n        setIsRecording(false);\r\n    };\r\n\r\n    if (speechRecognition == null) {\r\n        return <></>;\r\n    }\r\n    return (\r\n        <>\r\n            {!isRecording && (\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content={t(\"tooltips.askWithVoice\")} relationship=\"label\">\r\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={startRecording} />\r\n                    </Tooltip>\r\n                </div>\r\n            )}\r\n            {isRecording && (\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content={t(\"tooltips.stopRecording\")} relationship=\"label\">\r\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(250, 0, 0, 0.7)\" />} disabled={!isRecording} onClick={stopRecording} />\r\n                    </Tooltip>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","/**\r\n * This file defines a context for managing login state in a React application.\r\n * Context provides a way to pass data through the component tree without having to pass props down manually at every level.\r\n * For more information, refer to the official React documentation:\r\n * https://react.dev/learn/passing-data-deeply-with-context\r\n */\r\n\r\nimport { createContext } from \"react\";\r\n\r\nexport const LoginContext = createContext({\r\n    loggedIn: false,\r\n    setLoggedIn: (_: boolean) => {}\r\n});\r\n","import { Button } from \"@fluentui/react-components\";\nimport styles from \"./PromptButton.module.css\";\nimport { StringUtils } from \"@azure/msal-browser\";\n\ninterface PromptButtonProps {\n    toggleMenu: () => void;\n    buttonRef?: React.RefObject<HTMLButtonElement>;\n    loggedIn: boolean;\n    iconSource: string;\n    iconAlt: string;\n    text: string;\n    className?: string;\n}\n\nexport const PromptButton = ({ toggleMenu, buttonRef, loggedIn, iconSource, iconAlt, text, className }: PromptButtonProps) => {\n    return (\n        <Button\n            ref={buttonRef}\n            disabled={!loggedIn}\n            icon={<img src={iconSource} alt={iconAlt} className={styles.iconImage} />}\n            onClick={toggleMenu}\n            className={`${styles.promptButton} ${className ?? \"\"}`}\n        >\n            {text}\n        </Button>\n    );\n};\n\nexport function sendPromptDerWoche(promptText: string) {\n    const recipient = \"CCD@gsk.de\";\n    const subject = \"Prompt der Woche\";\n    const body = `Liebes CCD Team,\\n\\nich habe eine neue Prompt-Idee, die für andere nützlich sein könnte, und würde sie daher gerne für die Promptdatenbank einreichen:\\n\\n\"\\n${promptText}\\n\"\\n\\nBeste Grüße\\n`;\n\n    // Construct the mailto link\n    const mailtoLink = `mailto:${recipient}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;\n\n    // Open Outlook (or the default email client)\n    window.location.href = mailtoLink;\n}\n","import { useEffect, useContext, useRef } from \"react\";\r\nimport { Stack } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\nimport { SpeechInput } from \"./SpeechInput\";\r\nimport { LoginContext } from \"../../loginContext\";\r\nimport { requireLogin } from \"../../authConfig\";\r\nimport { PromptButton, sendPromptDerWoche } from \"../../features/PromptDatabase/components/PromptButton\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    initQuestion?: string;\r\n    handlePlaceholder: (placeholder: string) => void;\r\n    placeholder: string;\r\n    clearOnSend?: boolean;\r\n    showSpeechInput?: boolean;\r\n    toggleLoadPromptMenu: () => void;\r\n    loadPromptButtonRef: React.RefObject<HTMLButtonElement>;\r\n    toggleSavePromptMenu: () => void;\r\n    savePromptButtonRef: React.RefObject<HTMLButtonElement>;\r\n    questionHandler: (question: string) => void;\r\n    question: string;\r\n}\r\n\r\nexport const QuestionInput = ({\r\n    onSend,\r\n    disabled,\r\n    handlePlaceholder,\r\n    placeholder,\r\n    clearOnSend,\r\n    initQuestion,\r\n    showSpeechInput,\r\n    toggleLoadPromptMenu,\r\n    loadPromptButtonRef,\r\n    toggleSavePromptMenu,\r\n    savePromptButtonRef,\r\n    questionHandler,\r\n    question\r\n}: Props) => {\r\n    const textAreaRef = useRef<HTMLTextAreaElement | null>(null);\r\n    const { loggedIn } = useContext(LoginContext);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        initQuestion && questionHandler(initQuestion);\r\n    }, [initQuestion]);\r\n\r\n    useEffect(() => {\r\n        // Dynamisch die Höhe des Textarea und des Containers anpassen\r\n        if (textAreaRef.current) {\r\n            const textarea = textAreaRef.current;\r\n            textarea.style.height = \"auto\";\r\n            textarea.style.height = Math.min(textarea.scrollHeight, parseFloat(textarea.style.maxHeight)) + \"px\";\r\n        }\r\n    }, [question]);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            questionHandler(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            questionHandler(\"\");\r\n        } else if (newValue.length <= 10000) {\r\n            questionHandler(newValue);\r\n        }\r\n    };\r\n\r\n    const disableRequiredAccessControl = requireLogin && !loggedIn;\r\n\r\n    useEffect(() => {\r\n        if (!loggedIn) {\r\n            handlePlaceholder(\"Please login to continue...\");\r\n        } else {\r\n            handlePlaceholder(t(\"defaultExamples.placeholder\"));\r\n        }\r\n    }, [loggedIn]);\r\n\r\n    return (\r\n        <Stack horizontal={false} className={styles.questionInputContainer} style={{ height: \"auto\" }}>\r\n            <textarea\r\n                ref={textAreaRef}\r\n                className={styles.questionInputTextArea}\r\n                disabled={disableRequiredAccessControl}\r\n                placeholder={placeholder}\r\n                value={question}\r\n                onChange={e => onQuestionChange(e as any, e.target.value)}\r\n                onKeyDown={onEnterPress}\r\n                rows={1}\r\n                style={{\r\n                    resize: \"none\", // Verhindert manuelles Resizing\r\n                    overflowY: \"auto\", // Scrollen aktivieren, wenn Inhalt größer ist\r\n                    maxHeight: \"200px\" // Maximalhöhe auf 400px begrenzen\r\n                }}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                {loggedIn ? (\r\n                    <>\r\n                        <PromptButton\r\n                            toggleMenu={toggleLoadPromptMenu}\r\n                            buttonRef={loadPromptButtonRef}\r\n                            loggedIn={loggedIn}\r\n                            iconSource=\"./enter.svg\"\r\n                            iconAlt=\"LoadPromptIcon\"\r\n                            text={t(\"promptButtons.load\")}\r\n                        />\r\n                        <PromptButton\r\n                            toggleMenu={toggleSavePromptMenu}\r\n                            buttonRef={savePromptButtonRef}\r\n                            loggedIn={loggedIn}\r\n                            iconSource=\"./add-text.svg\"\r\n                            iconAlt=\"SavePromptIcon\"\r\n                            text={t(\"promptButtons.save\")}\r\n                        />\r\n                        <PromptButton\r\n                            toggleMenu={() => sendPromptDerWoche(question)}\r\n                            loggedIn={loggedIn}\r\n                            iconSource=\"./send2.svg\"\r\n                            iconAlt=\"PromptDerWoche\"\r\n                            text={t(\"promptButtons.woche\")}\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </div>\r\n            {showSpeechInput && <SpeechInput updateQuestion={questionHandler} />}\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","import { Label } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport {\r\n    DataGridBody,\r\n    DataGridRow,\r\n    DataGrid,\r\n    DataGridHeader,\r\n    DataGridHeaderCell,\r\n    DataGridCell,\r\n    createTableColumn,\r\n    TableColumnDefinition\r\n} from \"@fluentui/react-table\";\r\nimport { getTokenClaims } from \"../../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ntype Claim = {\r\n    name: string;\r\n    value: string;\r\n};\r\n\r\nexport const TokenClaimsDisplay = () => {\r\n    const { instance } = useMsal();\r\n    const [claims, setClaims] = useState<Record<string, unknown> | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        const fetchClaims = async () => {\r\n            setClaims(await getTokenClaims(instance));\r\n        };\r\n\r\n        fetchClaims();\r\n    }, []);\r\n\r\n    const ToString = (a: string | any) => {\r\n        if (typeof a === \"string\") {\r\n            return a;\r\n        } else {\r\n            return JSON.stringify(a);\r\n        }\r\n    };\r\n\r\n    let createClaims = (o: Record<string, unknown> | undefined) => {\r\n        return Object.keys(o ?? {}).map((key: string) => {\r\n            let originalKey = key;\r\n            try {\r\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\r\n                const url = new URL(key);\r\n                const parts = url.pathname.split(\"/\");\r\n                key = parts[parts.length - 1];\r\n            } catch (error) {\r\n                // Do not parse key if it's not a URL\r\n            }\r\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\r\n        });\r\n    };\r\n    const items: Claim[] = createClaims(claims);\r\n\r\n    const columns: TableColumnDefinition<Claim>[] = [\r\n        createTableColumn<Claim>({\r\n            columnId: \"name\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.name.localeCompare(b.name);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Name\";\r\n            },\r\n            renderCell: item => {\r\n                return item.name;\r\n            }\r\n        }),\r\n        createTableColumn<Claim>({\r\n            columnId: \"value\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.value.localeCompare(b.value);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Value\";\r\n            },\r\n            renderCell: item => {\r\n                return item.value;\r\n            }\r\n        })\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <Label>ID Token Claims</Label>\r\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\r\n                <DataGridHeader>\r\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\r\n                </DataGridHeader>\r\n                <DataGridBody<Claim>>\r\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\r\n                </DataGridBody>\r\n            </DataGrid>\r\n        </div>\r\n    );\r\n};\r\n","import { ITextFieldProps, DefaultButton, IconButton, IButtonStyles, Callout, IStackTokens, Stack, IStackStyles, initializeIcons } from \"@fluentui/react\";\r\nimport { useBoolean, useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst stackTokens: IStackTokens = {\r\n    childrenGap: 4,\r\n    maxWidth: 300\r\n};\r\n\r\nconst labelCalloutStackStyles: Partial<IStackStyles> = { root: { padding: 20 } };\r\nconst iconButtonStyles: Partial<IButtonStyles> = { root: { marginBottom: -3 } };\r\nconst iconProps = { iconName: \"Info\" };\r\n\r\ninterface IHelpCalloutProps {\r\n    label: string | undefined;\r\n    labelId: string;\r\n    fieldId: string | undefined;\r\n    helpText: string;\r\n}\r\n\r\nexport const HelpCallout = (props: IHelpCalloutProps): JSX.Element => {\r\n    const [isCalloutVisible, { toggle: toggleIsCalloutVisible }] = useBoolean(false);\r\n    const descriptionId: string = useId(\"description\");\r\n    const iconButtonId: string = useId(\"iconButton\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <>\r\n            <Stack horizontal verticalAlign=\"center\" tokens={stackTokens}>\r\n                <label id={props.labelId} htmlFor={props.fieldId}>\r\n                    {props.label}\r\n                </label>\r\n                <IconButton\r\n                    id={iconButtonId}\r\n                    iconProps={iconProps}\r\n                    title={t(\"tooltips.info\")}\r\n                    ariaLabel=\"Info\"\r\n                    onClick={toggleIsCalloutVisible}\r\n                    styles={iconButtonStyles}\r\n                />\r\n            </Stack>\r\n            {isCalloutVisible && (\r\n                <Callout target={\"#\" + iconButtonId} setInitialFocus onDismiss={toggleIsCalloutVisible} ariaDescribedBy={descriptionId} role=\"alertdialog\">\r\n                    <Stack tokens={stackTokens} horizontalAlign=\"start\" styles={labelCalloutStackStyles}>\r\n                        <span id={descriptionId}>{props.helpText}</span>\r\n                        <DefaultButton onClick={toggleIsCalloutVisible}>{t(\"labels.closeButton\")}</DefaultButton>\r\n                    </Stack>\r\n                </Callout>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Stack, Checkbox, ICheckboxProps, IDropdownOption, IDropdownProps, Dropdown } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./GPT4VSettings.module.css\";\r\nimport { GPT4VInput } from \"../../api\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\n\r\ninterface Props {\r\n    gpt4vInputs: GPT4VInput;\r\n    isUseGPT4V: boolean;\r\n    updateGPT4VInputs: (input: GPT4VInput) => void;\r\n    updateUseGPT4V: (useGPT4V: boolean) => void;\r\n}\r\n\r\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\r\n\r\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        updateUseGPT4V(!!checked);\r\n        setUseGPT4V(!!checked);\r\n    };\r\n\r\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\r\n        if (option) {\r\n            const data = option.key as GPT4VInput;\r\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\r\n            data && setVectorFieldOption(data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\r\n    }, [useGPT4V]);\r\n\r\n    const useGPT4VId = useId(\"useGPT4V\");\r\n    const useGPT4VFieldId = useId(\"useGPT4VField\");\r\n    const gpt4VInputId = useId(\"gpt4VInput\");\r\n    const gpt4VInputFieldId = useId(\"gpt4VInputField\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Checkbox\r\n                id={useGPT4VFieldId}\r\n                checked={useGPT4V}\r\n                label={t(\"labels.useGPT4V\")}\r\n                onChange={onuseGPT4V}\r\n                aria-labelledby={useGPT4VId}\r\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                    <HelpCallout labelId={useGPT4VId} fieldId={useGPT4VFieldId} helpText={t(\"helpTexts.useGPT4Vision\")} label={props?.label} />\r\n                )}\r\n            />\r\n            {useGPT4V && (\r\n                <Dropdown\r\n                    id={gpt4VInputFieldId}\r\n                    selectedKey={vectorFieldOption}\r\n                    label={t(\"labels.gpt4VInput.label\")}\r\n                    options={[\r\n                        {\r\n                            key: GPT4VInput.TextAndImages,\r\n                            text: t(\"labels.gpt4VInput.options.textAndImages\")\r\n                        },\r\n                        { text: t(\"labels.gpt4VInput.options.images\"), key: GPT4VInput.Images },\r\n                        { text: t(\"labels.gpt4VInput.options.texts\"), key: GPT4VInput.Texts }\r\n                    ]}\r\n                    required\r\n                    onChange={onSetGPT4VInput}\r\n                    aria-labelledby={gpt4VInputId}\r\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                        <HelpCallout labelId={gpt4VInputId} fieldId={gpt4VInputFieldId} helpText={t(\"helpTexts.gpt4VisionInputs\")} label={props?.label} />\r\n                    )}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Stack, IDropdownOption, Dropdown, IDropdownProps } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./VectorSettings.module.css\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\nimport { RetrievalMode, VectorFieldOptions } from \"../../api\";\r\n\r\ninterface Props {\r\n    showImageOptions?: boolean;\r\n    defaultRetrievalMode: RetrievalMode;\r\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\r\n    updateVectorFields: (options: VectorFieldOptions[]) => void;\r\n}\r\n\r\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions, defaultRetrievalMode }: Props) => {\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<VectorFieldOptions>(VectorFieldOptions.Both);\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n    const onVectorFieldsChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\r\n        setVectorFieldOption(option?.key as VectorFieldOptions);\r\n        updateVectorFields([option?.key as VectorFieldOptions]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        showImageOptions\r\n            ? updateVectorFields([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding])\r\n            : updateVectorFields([VectorFieldOptions.Embedding]);\r\n    }, [showImageOptions]);\r\n\r\n    const retrievalModeId = useId(\"retrievalMode\");\r\n    const retrievalModeFieldId = useId(\"retrievalModeField\");\r\n    const vectorFieldsId = useId(\"vectorFields\");\r\n    const vectorFieldsFieldId = useId(\"vectorFieldsField\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Dropdown\r\n                id={retrievalModeFieldId}\r\n                label={t(\"labels.retrievalMode.label\")}\r\n                selectedKey={defaultRetrievalMode.toString()}\r\n                options={[\r\n                    {\r\n                        key: \"hybrid\",\r\n                        text: t(\"labels.retrievalMode.options.hybrid\"),\r\n                        selected: retrievalMode == RetrievalMode.Hybrid,\r\n                        data: RetrievalMode.Hybrid\r\n                    },\r\n                    {\r\n                        key: \"vectors\",\r\n                        text: t(\"labels.retrievalMode.options.vectors\"),\r\n                        selected: retrievalMode == RetrievalMode.Vectors,\r\n                        data: RetrievalMode.Vectors\r\n                    },\r\n                    { key: \"text\", text: t(\"labels.retrievalMode.options.texts\"), selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\r\n                ]}\r\n                required\r\n                onChange={onRetrievalModeChange}\r\n                aria-labelledby={retrievalModeId}\r\n                onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                    <HelpCallout labelId={retrievalModeId} fieldId={retrievalModeFieldId} helpText={t(\"helpTexts.retrievalMode\")} label={props?.label} />\r\n                )}\r\n            />\r\n\r\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\r\n                <Dropdown\r\n                    id={vectorFieldsFieldId}\r\n                    label={t(\"labels.vector.label\")}\r\n                    options={[\r\n                        {\r\n                            key: VectorFieldOptions.Embedding,\r\n                            text: t(\"labels.vector.options.embedding\"),\r\n                            selected: vectorFieldOption === VectorFieldOptions.Embedding\r\n                        },\r\n                        {\r\n                            key: VectorFieldOptions.ImageEmbedding,\r\n                            text: t(\"labels.vector.options.imageEmbedding\"),\r\n                            selected: vectorFieldOption === VectorFieldOptions.ImageEmbedding\r\n                        },\r\n                        { key: VectorFieldOptions.Both, text: t(\"labels.vector.options.both\"), selected: vectorFieldOption === VectorFieldOptions.Both }\r\n                    ]}\r\n                    onChange={onVectorFieldsChange}\r\n                    aria-labelledby={vectorFieldsId}\r\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                        <HelpCallout labelId={vectorFieldsId} fieldId={vectorFieldsFieldId} helpText={t(\"helpTexts.vectorFields\")} label={props?.label} />\r\n                    )}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Checkbox, Panel, DefaultButton, TextField, ITextFieldProps, ICheckboxProps } from \"@fluentui/react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\nimport { useLogin, requireAccessControl } from \"../../authConfig\";\nimport { HelpCallout } from \"../../components/HelpCallout\";\nimport { t } from \"i18next\";\nimport styles from \"./DeveloperSettingsPanel.module.css\";\nimport { useId } from \"@fluentui/react-hooks\";\nimport { Dispatch, SetStateAction, useContext } from \"react\";\nimport { Config, gptModelSettings, RetrievalMode, VectorFieldOptions } from \"../../api\";\nimport { LoginContext } from \"../../loginContext\";\n\ninterface DeveloperSettingsProps {\n    isConfigPanelOpen: boolean;\n    gptConfig: gptModelSettings;\n    optionsConfig: Config;\n    retrievalMode: RetrievalMode;\n\n    setIsConfigPanelOpen: (isOpen: boolean) => void;\n    setChatConfig: Dispatch<SetStateAction<Config>>;\n    updatePropertyGptConfig: <K extends keyof gptModelSettings>(key: K, value: gptModelSettings[K]) => void;\n}\n\nexport const DeveloperSettings = (props: DeveloperSettingsProps) => {\n    const { loggedIn } = useContext(LoginContext);\n    const promptTemplateId = useId(\"promptTemplate\");\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\n    const temperatureId = useId(\"temperature\");\n    const temperatureFieldId = useId(\"temperatureField\");\n    const seedId = useId(\"seed\");\n    const seedFieldId = useId(\"seedField\");\n    const searchScoreId = useId(\"searchScore\");\n    const searchScoreFieldId = useId(\"searchScoreField\");\n    const rerankerScoreId = useId(\"rerankerScore\");\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\n    const retrieveCountId = useId(\"retrieveCount\");\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\n    const excludeCategoryId = useId(\"excludeCategory\");\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\n    const semanticRankerId = useId(\"semanticRanker\");\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\n    const semanticCaptionsId = useId(\"semanticCaptions\");\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\n    const suggestFollowupQuestionsId = useId(\"suggestFollowupQuestions\");\n    const suggestFollowupQuestionsFieldId = useId(\"suggestFollowupQuestionsField\");\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\n    const shouldStreamId = useId(\"shouldStream\");\n    const shouldStreamFieldId = useId(\"shouldStreamField\");\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        props.setChatConfig(prevConfig => ({\n            ...prevConfig,\n            showSemanticRankerOption: !!checked\n        }));\n    };\n\n    return (\n        <Panel\n            headerText={t(\"labels.headerText\")}\n            isOpen={props.isConfigPanelOpen}\n            isBlocking={false}\n            onDismiss={() => props.setIsConfigPanelOpen(false)}\n            closeButtonAriaLabel={t(\"labels.closeButton\")}\n            onRenderFooterContent={() => <DefaultButton onClick={() => props.setIsConfigPanelOpen(false)}>{t(\"labels.closeButton\")}</DefaultButton>}\n            isFooterAtBottom={true}\n        >\n            <TextField\n                id={promptTemplateFieldId}\n                className={styles.chatSettingsSeparator}\n                defaultValue={props.gptConfig.promptTemplate}\n                label={t(\"labels.promptTemplate\")}\n                multiline\n                autoAdjustHeight\n                onChange={(_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n                    props.updatePropertyGptConfig(\"promptTemplate\", newValue || \"\");\n                }}\n                aria-labelledby={promptTemplateId}\n                onRenderLabel={(props: ITextFieldProps | undefined) => (\n                    <HelpCallout labelId={promptTemplateId} fieldId={promptTemplateFieldId} helpText={t(\"helpTexts.promptTemplate\")} label={props?.label} />\n                )}\n            />\n\n            <TextField\n                id={temperatureFieldId}\n                className={styles.chatSettingsSeparator}\n                label={t(\"labels.temperature\")}\n                type=\"number\"\n                min={0}\n                max={1}\n                step={0.1}\n                defaultValue={props.gptConfig.temperature.toString()}\n                onChange={(_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n                    props.updatePropertyGptConfig(\"temperature\", parseFloat(newValue || \"0\"));\n                }}\n                aria-labelledby={temperatureId}\n                onRenderLabel={(props: ITextFieldProps | undefined) => (\n                    <HelpCallout labelId={temperatureId} fieldId={temperatureFieldId} helpText={t(\"helpTexts.temperature\")} label={props?.label} />\n                )}\n            />\n\n            <TextField\n                id={seedFieldId}\n                className={styles.chatSettingsSeparator}\n                label=\"Seed\"\n                type=\"text\"\n                defaultValue={props.gptConfig.seed?.toString() || \"\"}\n                onChange={(_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n                    props.updatePropertyGptConfig(\"seed\", parseInt(newValue || \"\"));\n                }}\n                aria-labelledby={seedId}\n                onRenderLabel={(props: ITextFieldProps | undefined) => (\n                    <HelpCallout labelId={seedId} fieldId={seedFieldId} helpText={t(\"helpTexts.seed\")} label={props?.label} />\n                )}\n            />\n\n            <TextField\n                id={searchScoreFieldId}\n                className={styles.chatSettingsSeparator}\n                label={t(\"labels.minimumSearchScore\")}\n                type=\"number\"\n                min={0}\n                step={0.01}\n                defaultValue={props.gptConfig.minimumSearchScore.toString()}\n                onChange={(_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n                    props.updatePropertyGptConfig(\"minimumSearchScore\", parseFloat(newValue || \"0\"));\n                }}\n                aria-labelledby={searchScoreId}\n                onRenderLabel={(props: ITextFieldProps | undefined) => (\n                    <HelpCallout labelId={searchScoreId} fieldId={searchScoreFieldId} helpText={t(\"helpTexts.searchScore\")} label={props?.label} />\n                )}\n            />\n\n            <TextField\n                id={rerankerScoreFieldId}\n                className={styles.chatSettingsSeparator}\n                label={t(\"labels.minimumRerankerScore\")}\n                type=\"number\"\n                min={1}\n                max={4}\n                step={0.1}\n                defaultValue={props.gptConfig.minimumRerankerScore.toString()}\n                onChange={(_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n                    props.updatePropertyGptConfig(\"minimumRerankerScore\", parseFloat(newValue || \"0\"));\n                }}\n                aria-labelledby={rerankerScoreId}\n                onRenderLabel={(props: ITextFieldProps | undefined) => (\n                    <HelpCallout labelId={rerankerScoreId} fieldId={rerankerScoreFieldId} helpText={t(\"helpTexts.rerankerScore\")} label={props?.label} />\n                )}\n            />\n\n            <TextField\n                id={retrieveCountFieldId}\n                className={styles.chatSettingsSeparator}\n                label={t(\"labels.retrieveCount\")}\n                type=\"number\"\n                min={1}\n                max={50}\n                defaultValue={props.gptConfig.retrieveCount.toString()}\n                onChange={(_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n                    props.updatePropertyGptConfig(\"retrieveCount\", parseInt(newValue || \"3\"));\n                }}\n                aria-labelledby={retrieveCountId}\n                onRenderLabel={(props: ITextFieldProps | undefined) => (\n                    <HelpCallout labelId={retrieveCountId} fieldId={retrieveCountFieldId} helpText={t(\"helpTexts.retrieveNumber\")} label={props?.label} />\n                )}\n            />\n\n            <TextField\n                id={excludeCategoryFieldId}\n                className={styles.chatSettingsSeparator}\n                label={t(\"labels.excludeCategory\")}\n                defaultValue={props.gptConfig.excludeCategory}\n                onChange={(_ev?: React.FormEvent, newValue?: string) => {\n                    props.updatePropertyGptConfig(\"excludeCategory\", newValue || \"\");\n                }}\n                aria-labelledby={excludeCategoryId}\n                onRenderLabel={(props: ITextFieldProps | undefined) => (\n                    <HelpCallout labelId={excludeCategoryId} fieldId={excludeCategoryFieldId} helpText={t(\"helpTexts.excludeCategory\")} label={props?.label} />\n                )}\n            />\n\n            <Checkbox\n                id={semanticRankerFieldId}\n                className={styles.chatSettingsSeparator}\n                checked={props.optionsConfig.useSemanticRanker}\n                label={t(\"labels.useSemanticRanker\")}\n                onChange={onUseSemanticRankerChange}\n                aria-labelledby={semanticRankerId}\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                    <HelpCallout\n                        labelId={semanticRankerId}\n                        fieldId={semanticRankerFieldId}\n                        helpText={t(\"helpTexts.useSemanticReranker\")}\n                        label={props?.label}\n                    />\n                )}\n            />\n\n            <Checkbox\n                id={semanticCaptionsFieldId}\n                className={styles.chatSettingsSeparator}\n                checked={props.gptConfig.useSemanticCaptions}\n                label={t(\"labels.useSemanticCaptions\")}\n                onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n                    props.updatePropertyGptConfig(\"useSemanticCaptions\", !!checked);\n                }}\n                disabled={!props.optionsConfig.useSemanticRanker}\n                aria-labelledby={semanticCaptionsId}\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                    <HelpCallout\n                        labelId={semanticCaptionsId}\n                        fieldId={semanticCaptionsFieldId}\n                        helpText={t(\"helpTexts.useSemanticCaptions\")}\n                        label={props?.label}\n                    />\n                )}\n            />\n\n            <Checkbox\n                id={suggestFollowupQuestionsFieldId}\n                className={styles.chatSettingsSeparator}\n                checked={props.gptConfig.useSuggestFollowupQuestions}\n                label={t(\"labels.useSuggestFollowupQuestions\")}\n                onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n                    props.updatePropertyGptConfig(\"useSuggestFollowupQuestions\", !!checked);\n                }}\n                aria-labelledby={suggestFollowupQuestionsId}\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                    <HelpCallout\n                        labelId={suggestFollowupQuestionsId}\n                        fieldId={suggestFollowupQuestionsFieldId}\n                        helpText={t(\"helpTexts.suggestFollowupQuestions\")}\n                        label={props?.label}\n                    />\n                )}\n            />\n\n            {props.optionsConfig.showGPT4VOptions && (\n                <GPT4VSettings\n                    gpt4vInputs={props.gptConfig.gpt4vInput}\n                    isUseGPT4V={props.gptConfig.useGPT4V}\n                    updateUseGPT4V={useGPT4V => {\n                        props.updatePropertyGptConfig(\"useGPT4V\", useGPT4V);\n                    }}\n                    updateGPT4VInputs={inputs => {\n                        props.updatePropertyGptConfig(\"gpt4vInput\", inputs);\n                    }}\n                />\n            )}\n\n            {props.optionsConfig.showVectorOption && (\n                <VectorSettings\n                    defaultRetrievalMode={props.retrievalMode}\n                    showImageOptions={props.gptConfig.useGPT4V && props.optionsConfig.showGPT4VOptions}\n                    updateVectorFields={(options: VectorFieldOptions[]) => props.updatePropertyGptConfig(\"vectorFieldList\", options)}\n                    updateRetrievalMode={(newRetrievalMode: RetrievalMode) => {\n                        props.setChatConfig(prevConfig => ({\n                            ...prevConfig,\n                            showVectorOption: newRetrievalMode === RetrievalMode.Hybrid\n                        }));\n                    }}\n                />\n            )}\n\n            {useLogin && (\n                <>\n                    <Checkbox\n                        id={useOidSecurityFilterFieldId}\n                        className={styles.chatSettingsSeparator}\n                        checked={props.gptConfig.useOidSecurityFilter || requireAccessControl}\n                        label={t(\"labels.useOidSecurityFilter\")}\n                        disabled={!loggedIn || requireAccessControl}\n                        onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n                            props.updatePropertyGptConfig(\"useOidSecurityFilter\", !!checked);\n                        }}\n                        aria-labelledby={useOidSecurityFilterId}\n                        onRenderLabel={(props: ICheckboxProps | undefined) => (\n                            <HelpCallout\n                                labelId={useOidSecurityFilterId}\n                                fieldId={useOidSecurityFilterFieldId}\n                                helpText={t(\"helpTexts.useOidSecurityFilter\")}\n                                label={props?.label}\n                            />\n                        )}\n                    />\n                    <Checkbox\n                        id={useGroupsSecurityFilterFieldId}\n                        className={styles.chatSettingsSeparator}\n                        checked={props.gptConfig.useGroupsSecurityFilter || requireAccessControl}\n                        label={t(\"labels.useGroupsSecurityFilter\")}\n                        disabled={!loggedIn || requireAccessControl}\n                        onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n                            props.updatePropertyGptConfig(\"useGroupsSecurityFilter\", !!checked);\n                        }}\n                        aria-labelledby={useGroupsSecurityFilterId}\n                        onRenderLabel={(props: ICheckboxProps | undefined) => (\n                            <HelpCallout\n                                labelId={useGroupsSecurityFilterId}\n                                fieldId={useGroupsSecurityFilterFieldId}\n                                helpText={t(\"helpTexts.useGroupsSecurityFilter\")}\n                                label={props?.label}\n                            />\n                        )}\n                    />\n                </>\n            )}\n\n            <Checkbox\n                id={shouldStreamFieldId}\n                className={styles.chatSettingsSeparator}\n                checked={props.gptConfig.shouldStream}\n                label={t(\"labels.shouldStream\")}\n                onChange={(_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n                    props.updatePropertyGptConfig(\"shouldStream\", !!checked);\n                }}\n                aria-labelledby={shouldStreamId}\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\n                    <HelpCallout labelId={shouldStreamId} fieldId={shouldStreamFieldId} helpText={t(\"helpTexts.streamChat\")} label={props?.label} />\n                )}\n            />\n\n            {useLogin && <TokenClaimsDisplay />}\n        </Panel>\n    );\n};\n","import DOMPurify from \"dompurify\";\r\n\r\ntype ParsedSupportingContentItem = {\r\n    title: string;\r\n    content: string;\r\n};\r\n\r\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n    // Assumes the item starts with the file name followed by : and the content.\r\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\r\n    const parts = item.split(\": \");\r\n    const title = parts[0];\r\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\r\n\r\n    return {\r\n        title,\r\n        content\r\n    };\r\n}\r\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\r\n\r\nimport styles from \"./SupportingContent.module.css\";\r\n\r\ninterface Props {\r\n    supportingContent: string[] | { text: string[]; images?: { url: string }[] };\r\n}\r\n\r\nexport const SupportingContent = ({ supportingContent }: Props) => {\r\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\r\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\r\n    return (\r\n        <ul className={styles.supportingContentNavList}>\r\n            {textItems.map((c, ind) => {\r\n                const parsed = parseSupportingContentItem(c);\r\n                return (\r\n                    <li className={styles.supportingContentItem} key={ind}>\r\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\r\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\r\n                    </li>\r\n                );\r\n            })}\r\n            {imageItems?.map((img, ind) => {\r\n                return <img className={styles.supportingContentItemImage} src={img.url} key={ind} />;\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Stack } from \"@fluentui/react\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { Thoughts } from \"../../api\";\r\n\r\ninterface Props {\r\n    thoughts: Thoughts[];\r\n}\r\n\r\nexport const ThoughtProcess = ({ thoughts }: Props) => {\r\n    return (\r\n        <ul className={styles.tList}>\r\n            {thoughts.map((t, ind) => {\r\n                return (\r\n                    <li className={styles.tListItem} key={ind}>\r\n                        <div className={styles.tStep}>{t.title}</div>\r\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\r\n                            {t.props &&\r\n                                (Object.keys(t.props) || []).map((k: any) => (\r\n                                    <span className={styles.tProp}>\r\n                                        {k}: {JSON.stringify(t.props?.[k])}\r\n                                    </span>\r\n                                ))}\r\n                        </Stack>\r\n                        {Array.isArray(t.description) ? (\r\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock}>\r\n                                {JSON.stringify(t.description, null, 2)}\r\n                            </SyntaxHighlighter>\r\n                        ) : (\r\n                            <div>{t.description}</div>\r\n                        )}\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { marked } from \"marked\";\r\nimport styles from \"./MarkdownViewer.module.css\";\r\nimport { Spinner, SpinnerSize, MessageBar, MessageBarType, Link, IconButton } from \"@fluentui/react\";\r\n\r\ninterface MarkdownViewerProps {\r\n    src: string;\r\n}\r\n\r\nexport const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ src }) => {\r\n    const [content, setContent] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [error, setError] = useState<Error | null>(null);\r\n    const { t } = useTranslation();\r\n\r\n    /**\r\n     * Anchor links are not handled well by 'marked' and result in HTTP 404 errors as the URL they point to does not exist.\r\n     * This function removes them from the resulted HTML.\r\n     */\r\n    const removeAnchorLinks = (html: string) => {\r\n        const ancorLinksRegex = /<a\\s+(?:[^>]*?\\s+)?href=['\"](#[^\"']*?)['\"][^>]*?>/g;\r\n        return html.replace(ancorLinksRegex, \"\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchMarkdown = async () => {\r\n            try {\r\n                const response = await fetch(src);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed loading markdown file.\");\r\n                }\r\n\r\n                const markdownText = await response.text();\r\n                const parsedHtml = await marked.parse(markdownText);\r\n                const cleanedHtml = removeAnchorLinks(parsedHtml);\r\n                setContent(cleanedHtml);\r\n            } catch (error: any) {\r\n                setError(error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchMarkdown();\r\n    }, [src]);\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? (\r\n                <div className={`${styles.loading} ${styles.markdownViewer}`}>\r\n                    <Spinner size={SpinnerSize.large} label=\"Loading file\" />\r\n                </div>\r\n            ) : error ? (\r\n                <div className={`${styles.error} ${styles.markdownViewer}`}>\r\n                    <MessageBar messageBarType={MessageBarType.error} isMultiline={false}>\r\n                        {error.message}\r\n                        <Link href={src} download>\r\n                            Download the file\r\n                        </Link>\r\n                    </MessageBar>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <IconButton\r\n                        className={styles.downloadButton}\r\n                        style={{ color: \"black\" }}\r\n                        iconProps={{ iconName: \"Save\" }}\r\n                        title={t(\"tooltips.save\")}\r\n                        ariaLabel=\"Save\"\r\n                        href={src}\r\n                        download\r\n                    />\r\n                    <div className={`${styles.markdown} ${styles.markdownViewer}`} dangerouslySetInnerHTML={{ __html: content }} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { ChatAppResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\nimport { ThoughtProcess } from \"./ThoughtProcess\";\r\nimport { MarkdownViewer } from \"../MarkdownViewer\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { getHeaders } from \"../../api\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: ChatAppResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n    const [citation, setCitation] = useState(\"\");\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n    const { t } = useTranslation();\r\n\r\n    const fetchCitation = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        if (activeCitation) {\r\n            // Get hash from the URL as it may contain #page=N\r\n            // which helps browser PDF renderer jump to correct page N\r\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\r\n            const response = await fetch(activeCitation, {\r\n                method: \"GET\",\r\n                headers: await getHeaders(token)\r\n            });\r\n            const citationContent = await response.blob();\r\n            let citationObjectUrl = URL.createObjectURL(citationContent);\r\n            // Add hash back to the new blob URL\r\n            if (originalHash) {\r\n                citationObjectUrl += \"#\" + originalHash;\r\n            }\r\n            setCitation(citationObjectUrl);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        fetchCitation();\r\n    }, []);\r\n\r\n    const renderFileViewer = () => {\r\n        if (!activeCitation) {\r\n            return null;\r\n        }\r\n\r\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\r\n        switch (fileExtension) {\r\n            case \"png\":\r\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\r\n            case \"md\":\r\n                return <MarkdownViewer src={activeCitation} />;\r\n            default:\r\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText={t(\"headerTexts.thoughtProcess\")}\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\r\n                headerText={t(\"headerTexts.supportingContent\")}\r\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <SupportingContent supportingContent={answer.context.data_points} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.CitationTab}\r\n                headerText={t(\"headerTexts.citation\")}\r\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                {renderFileViewer()}\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { Button } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button\r\n                icon={<img src=\"./restart.svg\" alt=\"Clear Chat Icon\" className={styles.clearChatIcon} />}\r\n                style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"flex-start\",\r\n                    gap: \"16px\" // Space between the icon and text\r\n                }}\r\n                disabled={disabled}\r\n                onClick={onClick}\r\n            >\r\n                {t(\"clearChat\")}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { useState, useContext, createContext, ReactNode } from \"react\";\nimport { ChatAppResponse } from \"./api\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ChatHistoryDbResponse } from \"./features/ChatHistory/models\";\n\nexport interface ChatState {\n    [chatId: string]: ChatHistoryDbResponse;\n}\n\nexport interface AllFiles {\n    [chatId: string]: string[];\n}\n\n/**\n * Converts a list of chat history objects to a dictionary of chat history objects.\n * The dictionary is keyed by the id of the chat history object and the value is the chat history object.\n */\nexport function chatListToObject(messages: ChatHistoryDbResponse[]): ChatState {\n    return messages.reduce((acc, message) => {\n        acc[message.id] = message;\n        return acc;\n    }, {} as ChatState);\n}\n\ninterface ChatManagerContextProps {\n    chatId: string;\n    setChatId: (chatId: string) => void;\n    answers: [user: string, response: ChatAppResponse][];\n    setAnswers: (answers: [user: string, response: ChatAppResponse][]) => void;\n    files: string[];\n    setFiles: (files: string[]) => void;\n    allFiles: AllFiles;\n    setAllFiles: (allFiles: AllFiles) => void;\n    addToAllFiles: (newFile: string, chatId: string) => void;\n    removeFromAllFiles: (filename: string, chatId: string) => void;\n    isConfigPanelOpen: boolean;\n    setIsConfigPanelOpen: (isConfigPanelOpen: boolean) => void;\n    streamedAnswers: [user: string, response: ChatAppResponse][];\n    setStreamedAnswers: (streamedAnswers: [user: string, response: ChatAppResponse][]) => void;\n    allSidebarChats: ChatState;\n    setAllSidebarChats: (chats: ChatState) => void;\n    updateSidebarChats: (newChat: ChatHistoryDbResponse) => void;\n}\n\nconst ChatManagerContext = createContext<ChatManagerContextProps | undefined>(undefined);\n\nexport function ChatManagerProvider({ children }: { children: ReactNode }) {\n    const [chatId, setChatId] = useState<string>(uuidv4());\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [files, setFiles] = useState<string[]>([]);\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState<boolean>(false);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\n    const [allSidebarChats, setAllSidebarChats] = useState<ChatState>({});\n    const [allFiles, setAllFiles] = useState<AllFiles>({});\n\n    /**\n     * Updates allSidebarChats with a new chat history object.\n     */\n    const updateSidebarChats = (newChat: ChatHistoryDbResponse) => {\n        setAllSidebarChats(prevChats => ({\n            ...prevChats,\n            [newChat.id]: newChat\n        }));\n    };\n\n    /**\n     * Updates files with a new uploaded filename for the currently active chat.\n     */\n    const addToAllFiles = (newFile: string, chatId: string) => {\n        const chatFiles = allFiles[chatId] ?? [];\n        const updatedFiles = [...chatFiles, newFile];\n        setAllFiles(prevFiles => ({\n            ...prevFiles,\n            [chatId]: updatedFiles\n        }));\n    };\n\n    /**\n     * Removes files with that were deleted from the currently active chat.\n     */\n    const removeFromAllFiles = (filename: string, chatId: string) => {\n        const chatFiles = allFiles[chatId];\n        const updatedFiles = chatFiles.filter(file => file !== filename);\n        if (updatedFiles.length === 0) {\n            setAllFiles(prevFiles => {\n                const { [chatId]: _, ...rest } = prevFiles; // seperates chatid from the rest\n                return rest;\n            });\n        } else {\n            setAllFiles(prevFiles => ({\n                ...prevFiles,\n                [chatId]: updatedFiles\n            }));\n        }\n    };\n\n    return (\n        <ChatManagerContext.Provider\n            value={{\n                chatId,\n                setChatId,\n                answers,\n                setAnswers,\n                files,\n                setFiles,\n                allFiles,\n                setAllFiles,\n                addToAllFiles,\n                removeFromAllFiles,\n                isConfigPanelOpen,\n                setIsConfigPanelOpen,\n                streamedAnswers,\n                setStreamedAnswers,\n                allSidebarChats,\n                setAllSidebarChats,\n                updateSidebarChats\n            }}\n        >\n            {children}\n        </ChatManagerContext.Provider>\n    );\n}\n\nexport const useChatManager = (): ChatManagerContextProps => {\n    const context = useContext(ChatManagerContext);\n    if (!context) {\n        throw new Error(\"useChatManager must be used within a ChatManagerProvider\");\n    }\n    return context;\n};\n","import React, { useState, ChangeEvent } from \"react\";\r\nimport { Callout, Label, Text } from \"@fluentui/react\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { Add24Regular, Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { SimpleAPIResponse, uploadFileApi, deleteUploadedFileApi, listUploadedFilesSingleChatApi } from \"../../api\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport styles from \"./UploadFile.module.css\";\r\nimport { useChatManager } from \"../../contextProviderChat\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const UploadFile: React.FC<Props> = ({ className, disabled }: Props) => {\r\n    // State variables to manage the component behavior\r\n    const [isCalloutVisible, setIsCalloutVisible] = useState<boolean>(false);\r\n    const [isUploading, setIsUploading] = useState<boolean>(true);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [deletionStatus, setDeletionStatus] = useState<{ [filename: string]: \"pending\" | \"error\" | \"success\" }>({});\r\n    const [uploadedFile, setUploadedFile] = useState<string>();\r\n    const [uploadedFileError, setUploadedFileError] = useState<string>();\r\n    const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\r\n    const { t } = useTranslation();\r\n    const { chatId, addToAllFiles, removeFromAllFiles } = useChatManager();\r\n\r\n    if (!useLogin) {\r\n        throw new Error(\"The UploadFile component requires useLogin to be true\");\r\n    }\r\n\r\n    const client = useMsal().instance;\r\n\r\n    // Handler for the \"Manage file uploads\" button\r\n    const handleButtonClick = async () => {\r\n        setIsCalloutVisible(!isCalloutVisible); // Toggle the Callout visibility\r\n\r\n        // Update uploaded files by calling the API\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const listUploadedFiles = async (idToken: string) => {\r\n        listUploadedFilesSingleChatApi(chatId, idToken).then(files => {\r\n            setIsLoading(false);\r\n            setDeletionStatus({});\r\n            setUploadedFiles(files);\r\n        });\r\n    };\r\n\r\n    const handleRemoveFile = async (filename: string) => {\r\n        setDeletionStatus({ ...deletionStatus, [filename]: \"pending\" });\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n\r\n            await deleteUploadedFileApi(filename, chatId, idToken);\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"success\" });\r\n            listUploadedFiles(idToken);\r\n            removeFromAllFiles(filename, chatId);\r\n        } catch (error) {\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"error\" });\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    // Handler for the form submission (file upload)\r\n    const handleUploadFile = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (!e.target.files || e.target.files.length === 0) {\r\n            return;\r\n        }\r\n        setIsUploading(true); // Start the loading state\r\n        const file: File = e.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        formData.append(\"chatId\", chatId);\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            const response: SimpleAPIResponse = await uploadFileApi(formData, idToken);\r\n            setUploadedFile(t(\"upload.uploadedFileSuccess\"));\r\n            setIsUploading(false);\r\n            setUploadedFileError(undefined);\r\n            listUploadedFiles(idToken);\r\n            response.filename ? addToAllFiles(response.filename, chatId) : console.warn(\"No filename returned\");\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsUploading(false);\r\n            setUploadedFileError(t(\"upload.uploadedFileError\"));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <div>\r\n                <Button id=\"calloutButton\" style={{ gap: \"4px\" }} icon={<Add24Regular />} disabled={disabled} onClick={handleButtonClick}>\r\n                    {t(\"upload.manageFileUploads\")}\r\n                </Button>\r\n\r\n                {isCalloutVisible && (\r\n                    <Callout\r\n                        role=\"dialog\"\r\n                        gapSpace={0}\r\n                        className={styles.callout}\r\n                        target=\"#calloutButton\"\r\n                        onDismiss={() => setIsCalloutVisible(false)}\r\n                        setInitialFocus\r\n                    >\r\n                        <form encType=\"multipart/form-data\">\r\n                            <div>\r\n                                <Label>{t(\"upload.fileLabel\")}</Label>\r\n                                <input\r\n                                    accept=\".txt, .md, .json, .png, .jpg, .jpeg, .bmp, .heic, .tiff, .pdf, .docx, .xlsx, .pptx, .html\"\r\n                                    className={styles.chooseFiles}\r\n                                    type=\"file\"\r\n                                    onChange={handleUploadFile}\r\n                                />\r\n                            </div>\r\n                        </form>\r\n\r\n                        {/* Show a loading message while files are being uploaded */}\r\n                        {isUploading && <Text>{t(\"upload.uploadingFiles\")}</Text>}\r\n                        {!isUploading && uploadedFileError && <Text>{uploadedFileError}</Text>}\r\n                        {!isUploading && uploadedFile && <Text>{uploadedFile}</Text>}\r\n\r\n                        {/* Display the list of already uploaded */}\r\n                        <h3>{t(\"upload.uploadedFilesLabel\")}</h3>\r\n\r\n                        {isLoading && <Text>{t(\"upload.loading\")}</Text>}\r\n                        {!isLoading && uploadedFiles.length === 0 && <Text>{t(\"upload.noFilesUploaded\")}</Text>}\r\n                        {uploadedFiles.map((filename, index) => {\r\n                            return (\r\n                                <div key={index} className={styles.list}>\r\n                                    <div className={styles.item}>{filename}</div>\r\n                                    {/* Button to remove a file from the list */}\r\n                                    <Button\r\n                                        icon={<Delete24Regular />}\r\n                                        onClick={() => handleRemoveFile(filename)}\r\n                                        disabled={deletionStatus[filename] === \"pending\" || deletionStatus[filename] === \"success\"}\r\n                                    >\r\n                                        {!deletionStatus[filename] && t(\"upload.deleteFile\")}\r\n                                        {deletionStatus[filename] == \"pending\" && t(\"upload.deletingFile\")}\r\n                                        {deletionStatus[filename] == \"error\" && t(\"upload.errorDeleting\")}\r\n                                        {deletionStatus[filename] == \"success\" && t(\"upload.fileDeleted\")}\r\n                                    </Button>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </Callout>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","export function createNumberArray(n: number): number[] {\n    const result: number[] = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(i);\n    }\n    return result;\n}\n","import { createNumberArray } from \"../../utils/arrayUtils\";\nimport styles from \"./LoadingTextAnimations.module.css\";\n\ninterface LoadingTextAnimationProps {\n    numberLoadingBars: number;\n    loadingBarHeight: string;\n}\n\nexport const LoadingTextAnimation = (props: LoadingTextAnimationProps) => (\n    <div className={styles.loadingAnimation}>\n        {createNumberArray(props.numberLoadingBars).map(item => (\n            <div key={item} className={styles.loadingBar} style={{ height: props.loadingBarHeight }}></div>\n        ))}\n    </div>\n);\n","export enum PromptMenuChoices {\n    GLOBAL = \"Global\",\n    USER = \"User\"\n}\n\nexport interface PromptDocument {\n    id: string;\n    title: string;\n    prompt: string;\n    source: string;\n}\n\nexport type PromptsDbResponse = {\n    id: string;\n    title: string;\n    prompt: string;\n    _ts: number;\n    source: string;\n};\n","import styles from \"./ClickableTextItem.module.css\";\n\ninterface Props {\n    children: React.ReactNode;\n    onMouseEnter?: () => void;\n    onMouseLeave?: () => void;\n    onClick: () => void;\n    key: string;\n    fontSize?: string;\n    fontWeight?: string;\n    paddingTop?: string;\n    paddingBottom?: string;\n    paddingLeft?: string;\n    paddingRight?: string;\n    hoverBackgroundColor?: string;\n    className?: string;\n}\n\nexport const ClickableTextItem = (props: Props) => {\n    return (\n        <div\n            className={`${styles.clickableItem} ${props.className ? props.className : \"\"}`}\n            key={props.key}\n            onClick={props.onClick}\n            onMouseEnter={props.onMouseEnter}\n            onMouseLeave={props.onMouseLeave}\n        >\n            {props.children}\n        </div>\n    );\n};\n","import { MutableRefObject } from \"react\";\n\nexport const handleClickOutsideDivElement = (\n    isElementOpen: boolean,\n    elementRef: MutableRefObject<HTMLDivElement | undefined>,\n    buttonWhichOpensElementRef: MutableRefObject<HTMLButtonElement | null>,\n    setIsElementOpen: (value: boolean) => void\n) => {\n    const handleClickOutside = (event: MouseEvent) => {\n        if (\n            isElementOpen &&\n            elementRef.current &&\n            !elementRef.current.contains(event.target as Node) &&\n            buttonWhichOpensElementRef.current &&\n            !buttonWhichOpensElementRef.current.contains(event.target as Node)\n        ) {\n            setIsElementOpen(false);\n        }\n    };\n\n    return handleClickOutside;\n};\n","import { ReactNode } from \"react\";\nimport styles from \"./DropDownMenu.module.css\";\nimport { MutableRefObject, useEffect, useRef, useState } from \"react\";\nimport { handleClickOutsideDivElement } from \"../../utils/mouseEvents\";\n\nexport interface MenuPosition {\n    // all values should be strings defining the position, e.g. 10px\n    top?: string;\n    left?: string;\n    bottom?: string;\n    right?: string;\n}\n\ninterface DropDownMenuProps {\n    children?: ReactNode;\n    /* Used for referencing the menu, in case something like a click outside event is needed */\n    menuRef: any;\n    /* Used for positioning the menu relative to some position like the button that was clicked to open the menu */\n    style?: React.CSSProperties;\n    getMenuPosition: () => MenuPosition;\n    className?: string;\n}\n\nexport const DropDownMenu = (props: DropDownMenuProps) => {\n    return (\n        <div\n            ref={props.menuRef}\n            className={`${styles.dropdownMenu} ${props.className ? props.className : \"\"}`}\n            style={{\n                ...props.getMenuPosition(),\n                ...props.style\n            }}\n        >\n            {props.children}\n        </div>\n    );\n};\n\nexport function menuPositionUnderneath(buttonRef: HTMLButtonElement | null) {\n    if (buttonRef) {\n        const rect = buttonRef.getBoundingClientRect();\n        return {\n            top: `${rect.top + rect.height + 2}px`,\n            left: `${rect.left - 2}px`\n        };\n    } else {\n        return { top: \"0px\", left: \"0px\" };\n    }\n}\n\nexport function menuPositionLeft(buttonRef: HTMLButtonElement | null) {\n    if (buttonRef) {\n        const rect = buttonRef.getBoundingClientRect();\n        return {\n            bottom: `${window.innerHeight - rect.bottom - 13}px`,\n            right: `${window.innerWidth - rect.left + 15}px`\n        };\n    } else {\n        return { bottom: \"0px\", right: \"0px\" };\n    }\n}\n\nexport const useOpenCloseMenu = (menuRef: MutableRefObject<HTMLDivElement | undefined>) => {\n    const [isDropdownMenuOpen, setIsDropdownMenuOpen] = useState(false);\n    const buttonRefDropdownMenu = useRef<HTMLButtonElement | null>(null);\n\n    const toggleLoadPromptMenu = () => {\n        setIsDropdownMenuOpen(!isDropdownMenuOpen);\n    };\n\n    useEffect(() => {\n        // Closes the load prompt menu when clicks occur outside of it\n        const handleClickOutside = handleClickOutsideDivElement(isDropdownMenuOpen, menuRef, buttonRefDropdownMenu, setIsDropdownMenuOpen);\n\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [isDropdownMenuOpen]);\n\n    return { toggleLoadPromptMenu, buttonRefDropdownMenu, isDropdownMenuOpen };\n};\n","import styles from \"./ToggleButton.module.css\";\n\ninterface ToggleProps {\n    toggleOptionSelected: (option: string) => void;\n    optionSelected: string;\n    toggleButtonChoices: { [key: string]: string };\n    className?: string;\n}\n\nexport const ToggleButtons = ({ optionSelected, toggleOptionSelected, toggleButtonChoices, className }: ToggleProps) => {\n    return (\n        <div className={`${styles.toggleSwitchContainer} ${className ?? \"\"}`}>\n            <div className={styles.toggleSwitch}>\n                {Object.values(toggleButtonChoices).map(option => (\n                    <button\n                        key={option}\n                        className={`${styles.toggleButton} ${optionSelected === option ? styles.active : \"\"}`}\n                        onClick={() => toggleOptionSelected(option)}\n                    >\n                        {option}\n                    </button>\n                ))}\n            </div>\n        </div>\n    );\n};\n","import styles from \"./OptionsButton.module.css\";\n\nconst Dot = () => <div className={styles.dotStyle} />;\n\ninterface OptionsProps {\n    toggleLoadPromptMenu: () => void;\n    buttonRefDropdownMenu: any;\n}\n\nexport const ThreeDotsOptionButton = (props: OptionsProps) => {\n    return (\n        <div className={styles.optionsButtonDiv}>\n            <button\n                onClick={() => {\n                    props.toggleLoadPromptMenu();\n                }}\n                className={styles.optionsButton}\n                ref={props.buttonRefDropdownMenu}\n            >\n                <span\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        gap: \"3px\"\n                    }}\n                >\n                    <Dot />\n                    <Dot />\n                    <Dot />\n                </span>\n            </button>\n        </div>\n    );\n};\n","import { LoadingTextAnimation } from \"../../../../components/Animations/LoadingTextAnimation\";\nimport styles from \"./PromptMenu.module.css\";\nimport { PromptMenuChoices, PromptsDbResponse } from \"../../models\";\nimport { ClickableTextItem } from \"../../../../components/ClickableTextItem\";\nimport { DropDownMenu, MenuPosition } from \"../../../../components/Menus\";\nimport { ToggleButtons } from \"../../../../components/Buttons\";\nimport { Button } from \"@fluentui/react-components\";\n\ninterface PromptMenuPagesProps {\n    handlePromptClick: (prompt: string) => void;\n    userPrompts: PromptsDbResponse[];\n    globalPrompts: PromptsDbResponse[];\n    handlePromptHovered: (prompt: string) => void;\n    handlePromptUnhovered: () => void;\n    pageSelected: string;\n    deleteUserPrompt: (promptId: string) => Promise<void>;\n}\n\nexport const PromptMenuPages = (props: PromptMenuPagesProps) => {\n    const allPrompts = props.userPrompts.concat(props.globalPrompts);\n\n    return (\n        <div className={styles.itemsContainer}>\n            {allPrompts.length === 0 ? (\n                <LoadingTextAnimation numberLoadingBars={4} loadingBarHeight=\"22px\" />\n            ) : props.pageSelected === PromptMenuChoices.USER && props.userPrompts.length === 0 ? (\n                <div className={styles.promptItemsMissing}>No user prompts found</div>\n            ) : (\n                allPrompts\n                    .filter(prompt => prompt.source.toLowerCase() === props.pageSelected.toLowerCase())\n                    .map(prompt =>\n                        props.pageSelected === PromptMenuChoices.USER ? (\n                            <div className={styles.userPromptContainer}>\n                                <ClickableTextItem\n                                    key={prompt.title}\n                                    onClick={() => props.handlePromptClick(prompt.prompt)}\n                                    onMouseEnter={() => props.handlePromptHovered(prompt.prompt)}\n                                    onMouseLeave={() => props.handlePromptUnhovered()}\n                                    className={styles.clickablePrompt}\n                                >\n                                    {prompt.title}\n                                </ClickableTextItem>\n                                <Button\n                                    icon={\n                                        <img\n                                            src=\"./trash-alt.svg\"\n                                            alt=\"Chat Bot Icon\"\n                                            style={{\n                                                width: \"18px\",\n                                                height: \"18px\",\n                                                marginLeft: \"1px\"\n                                            }}\n                                        />\n                                    }\n                                    className={styles.deletePromptButton}\n                                    onClick={() => props.deleteUserPrompt(prompt.id)}\n                                />\n                            </div>\n                        ) : (\n                            <ClickableTextItem\n                                key={prompt.title}\n                                onClick={() => props.handlePromptClick(prompt.prompt)}\n                                onMouseEnter={() => props.handlePromptHovered(prompt.prompt)}\n                                onMouseLeave={() => props.handlePromptUnhovered()}\n                                className={styles.clickablePrompt}\n                                children={prompt.title}\n                            />\n                        )\n                    )\n            )}\n        </div>\n    );\n};\n\ninterface PromptMenuProps {\n    userPrompts: PromptsDbResponse[];\n    globalPrompts: PromptsDbResponse[];\n    menuRef: React.RefObject<HTMLDivElement | undefined>;\n    toggleMenuSection: (option: string) => void;\n    menuSectionSelected: string;\n    handlePromptClick: (prompt: string) => void;\n    handlePromptHovered: (prompt: string) => void;\n    handlePromptUnhovered: () => void;\n    deleteUserPrompt: (promptId: string) => Promise<void>;\n    getMenuPosition: () => MenuPosition;\n}\n\nexport const PromptMenu = ({\n    userPrompts,\n    globalPrompts,\n    menuRef,\n    toggleMenuSection,\n    menuSectionSelected,\n    handlePromptClick,\n    handlePromptHovered,\n    handlePromptUnhovered,\n    deleteUserPrompt,\n    getMenuPosition\n}: PromptMenuProps) => {\n    return (\n        <DropDownMenu\n            getMenuPosition={getMenuPosition}\n            style={{ backgroundColor: \"white\", paddingTop: \"0.4rem\", borderRadius: \"8px\", display: \"flex\", flexDirection: \"column\" }}\n            menuRef={menuRef}\n            className={styles.promptMenu}\n        >\n            <ToggleButtons toggleOptionSelected={toggleMenuSection} optionSelected={menuSectionSelected} toggleButtonChoices={PromptMenuChoices} />\n            <PromptMenuPages\n                globalPrompts={globalPrompts}\n                userPrompts={userPrompts}\n                pageSelected={menuSectionSelected}\n                handlePromptClick={handlePromptClick}\n                handlePromptHovered={handlePromptHovered}\n                handlePromptUnhovered={handlePromptUnhovered}\n                deleteUserPrompt={deleteUserPrompt}\n            />\n        </DropDownMenu>\n    );\n};\n","import { useState } from \"react\";\nimport { PromptMenuChoices } from \"../models\";\n\nexport const useMenuSelected = () => {\n    const [menuSectionSelected, setMenuSectionSelected] = useState<string>(PromptMenuChoices.GLOBAL);\n    const toggleMenuSection = (section: string) => {\n        setMenuSectionSelected(section);\n    };\n\n    return {\n        menuSectionSelected,\n        toggleMenuSection\n    };\n};\n","import { getHeaders } from \"../../../api/api\";\nimport { PromptsDbResponse } from \"../models\";\n\nexport async function getPromptsApi(idToken: string, promptsType: string): Promise<PromptsDbResponse[]> {\n    if (![\"global\", \"user\"].includes(promptsType)) {\n        throw new Error(`Invalid prompt type: ${promptsType}`);\n    }\n    const headers = await getHeaders(idToken);\n    console.log(\"Making call to prompts API\");\n    console.log(promptsType);\n    const response = await fetch(`/${promptsType}_prompts/items`, {\n        method: \"GET\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n    console.log(`Got prompt response ${response}`);\n\n    if (!response.ok) {\n        throw new Error(`Getting ${promptsType} prompts failed: ${response.statusText}`);\n    }\n\n    const dataResponse: PromptsDbResponse[] = await response.json();\n    console.log(\"Sending back prompts\");\n    return dataResponse;\n}\n\nexport async function addUserPromptsApi(idToken: string, prompt: string, title: string): Promise<PromptsDbResponse[]> {\n    const headers = await getHeaders(idToken);\n    const id = await generateHash(prompt);\n\n    const response = await fetch(`/user_prompts/add`, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ id, title, prompt })\n    });\n\n    if (!response.ok) {\n        throw new Error(`Adding new prompt failed: ${response.statusText}`);\n    }\n\n    const dataResponse = await response.json();\n    return dataResponse;\n}\n\nexport async function deleteUserPromptsApi(idToken: string, promptId: string): Promise<Response> {\n    const headers = await getHeaders(idToken);\n\n    const response = await fetch(`/user_prompts/delete/${promptId}`, {\n        method: \"POST\",\n        headers: { ...headers, \"Content-Type\": \"application/json\" }\n    });\n\n    if (!response.ok) {\n        throw new Error(`Deleting user prompt failed: ${response.statusText}`);\n    }\n    return response;\n}\n\nconst generateHash = async (inputString: string): Promise<string> => {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(inputString);\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n};\n","import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { PromptsDbResponse } from \"../models\";\nimport { getToken } from \"../../../authConfig\";\nimport { getPromptsApi } from \"../services/promptsApi\";\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\nimport { useTranslation } from \"react-i18next\";\n\nexport const usePromptPlaceholder = (question: string, setQuestion: Dispatch<SetStateAction<string>>) => {\n    const { t } = useTranslation();\n    const [placeholder, setPlaceholder] = useState<string>(t(\"defaultExamples.placeholder\"));\n    const [previousQuestion, setPreviousQuestion] = useState<string>(\"\");\n\n    const handlePromptClick = (prompt: string) => {\n        setQuestion(prompt);\n        setPreviousQuestion(\"\");\n    };\n\n    const handlePromptHovered = (prompt: string) => {\n        if (question) {\n            setPreviousQuestion(question);\n        }\n        setQuestion(\"\");\n        setPlaceholder(prompt);\n    };\n\n    const handlePromptUnhovered = () => {\n        if (previousQuestion) {\n            setQuestion(previousQuestion);\n        }\n        setPlaceholder(t(\"defaultExamples.placeholder\"));\n    };\n\n    return { placeholder, setPlaceholder, setPreviousQuestion, handlePromptClick, handlePromptHovered, handlePromptUnhovered };\n};\n\nexport const useGetPrompts = (instance: IPublicClientApplication, loggedIn: boolean) => {\n    const [onlyGlobalPrompts, setOnlyGlobalPrompts] = useState<PromptsDbResponse[]>([]);\n    const [onlyUserPrompts, setOnlyUserPrompts] = useState<PromptsDbResponse[]>([]);\n\n    const getPrompts = async (promptType: string) => {\n        console.log(\"Getting prompts\");\n        console.log(promptType);\n        const idToken = await getToken(instance);\n        if (idToken) {\n            const prompts = await getPromptsApi(idToken, promptType);\n            prompts.forEach(obj => {\n                obj[\"source\"] = promptType;\n            });\n            if (promptType === \"global\") {\n                setOnlyGlobalPrompts(prompts);\n            } else if (promptType === \"user\") {\n                setOnlyUserPrompts(prompts);\n            } else {\n                throw new Error(\"Invalid prompt type\");\n            }\n        } else {\n            throw new Error(\"No authentication token available\");\n        }\n    };\n\n    useEffect(() => {\n        if (loggedIn) {\n            console.log(\"Getting logged in prompts\", loggedIn);\n            getPrompts(\"global\");\n            getPrompts(\"user\");\n        }\n    }, [loggedIn]);\n\n    return { onlyGlobalPrompts, onlyUserPrompts, getPrompts };\n};\n","import { useRef, useState } from \"react\";\nimport { addUserPromptsApi, deleteUserPromptsApi } from \"../services/promptsApi\";\nimport { getToken } from \"../../../authConfig\";\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\n\nexport const useUpdateUserPrompts = (instance: IPublicClientApplication, reFetchPrompts: (promptType: string) => void) => {\n    const [openSavePromptMenu, setOpenSavePromptMenu] = useState(false);\n    const savePromptButtonRef = useRef<HTMLButtonElement | null>(null);\n\n    const handleSavePrompt = async (promptName: string, promptText: string) => {\n        const idToken = await getToken(instance);\n        if (idToken) {\n            console.log(\"Saving prompt and refetching user prompts\");\n            await addUserPromptsApi(idToken, promptText, promptName);\n            reFetchPrompts(\"user\");\n        } else {\n            throw new Error(\"No authentication token available while saving prompt\");\n        }\n        setOpenSavePromptMenu(false);\n    };\n\n    const deleteUserPrompt = async (prompt_id: string) => {\n        const token = await getToken(instance);\n        if (!token) {\n            throw new Error(\"No authentication token available\");\n        }\n        const resp = await deleteUserPromptsApi(token, prompt_id);\n        if (!resp.ok) {\n            throw new Error(resp.statusText);\n        }\n        reFetchPrompts(\"user\");\n        console.log(\"Done deletingg\");\n    };\n\n    return { savePromptButtonRef, openSavePromptMenu, setOpenSavePromptMenu, handleSavePrompt, deleteUserPrompt };\n};\n","import { useEffect, useState } from \"react\";\nimport styles from \"./SavePromptMenu.module.css\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface MenuProps {\n    onClose: () => void;\n    onSave: (promptName: string, promptText: string) => void;\n    reloadUserPrompts: () => void;\n}\n\nexport const SavePromptMenu = ({ onClose, onSave, reloadUserPrompts }: MenuProps) => {\n    const { t } = useTranslation();\n    const [name, setName] = useState(\"\");\n    const [promptText, setPromptText] = useState(\"\");\n    const [saveEnabled, setSaveEnabled] = useState(false);\n\n    const handleSave = () => {\n        onSave(name, promptText);\n        reloadUserPrompts();\n    };\n\n    useEffect(() => {\n        if (name && promptText) {\n            setSaveEnabled(true);\n        } else {\n            setSaveEnabled(false);\n        }\n    }, [name, promptText]);\n\n    return (\n        <div className={styles.menuOverlay}>\n            <div className={styles.menuContainer}>\n                <div className={styles.menuHeader}>\n                    <h2>{t(\"savePrompt.title\")}</h2>\n                    <button className={styles.closeButton} onClick={onClose}>\n                        ×\n                    </button>\n                </div>\n\n                <div className={styles.menuContent}>\n                    <h3>{t(\"savePrompt.name\")}</h3>\n                    <input type=\"text\" placeholder={t(\"savePrompt.namePlaceholder\")} className={styles.shortInput} onChange={e => setName(e.target.value)} />\n\n                    <h3>{t(\"savePrompt.promptHeader\")}</h3>\n                    <textarea\n                        placeholder={t(\"savePrompt.promptHeaderPlaceholder\")}\n                        maxLength={100000}\n                        className={styles.longInput}\n                        onChange={e => setPromptText(e.target.value)}\n                    />\n                </div>\n\n                <div className={styles.menuFooter}>\n                    <button className={styles.cancelButton} onClick={onClose}>\n                        {t(\"savePrompt.cancel\")}\n                    </button>\n                    <button className={`${styles.saveButton} ${saveEnabled ? styles.enabled : styles.disabled}`} onClick={handleSave} disabled={!saveEnabled}>\n                        {t(\"savePrompt.save\")}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Config, configApi, RetrievalMode } from \"../api\";\n\nexport const useChatConfig = () => {\n    const [chatConfig, setChatConfig] = useState<Config>({\n        showGPT4VOptions: false,\n        useSemanticRanker: false,\n        showVectorOption: false,\n        showUserUpload: false,\n        showSpeechInput: false,\n        showSpeechOutputBrowser: false,\n        showSpeechOutputAzure: false\n    });\n\n    useEffect(() => {\n        const fetchConfig = async () => {\n            try {\n                const config = await configApi();\n                setChatConfig(config);\n            } catch (error) {\n                console.error(`Error fetching model config: ${error}`);\n            }\n        };\n        fetchConfig();\n    }, []);\n\n    var retrievalMode = !chatConfig.showVectorOption ? RetrievalMode.Text : RetrievalMode.Hybrid;\n\n    return {\n        retrievalMode,\n        chatConfig,\n        setChatConfig\n    };\n};\n","import { useState } from \"react\";\nimport { GPT4VInput, gptModelSettings, VectorFieldOptions } from \"../api\";\n\nexport const useGptModelConfig = () => {\n    const [gptModelConfig, setGptModelConfig] = useState<gptModelSettings>({\n        temperature: 0.3,\n        seed: null,\n        minimumSearchScore: 0,\n        minimumRerankerScore: 0,\n        retrieveCount: 3,\n        excludeCategory: \"\",\n        useSemanticCaptions: false,\n        useSuggestFollowupQuestions: false,\n        useOidSecurityFilter: false,\n        useGroupsSecurityFilter: false,\n        shouldStream: true,\n        useGPT4V: false,\n        gpt4vInput: GPT4VInput.TextAndImages,\n        vectorFieldList: [VectorFieldOptions.Embedding],\n        promptTemplate: \"\"\n    });\n\n    const updateGptModelConfig = <K extends keyof gptModelSettings>(key: K, value: gptModelSettings[K]) => {\n        setGptModelConfig(prev => ({\n            ...prev!,\n            [key]: value\n        }));\n    };\n\n    return { gptModelConfig, setGptModelConfig, updateGptModelConfig };\n};\n","import { useRef, useState, useEffect, useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport styles from \"./Chat.module.css\";\r\n\r\nimport { chatApi, getSpeechApi, ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, ResponseMessage } from \"../../api\";\r\nimport { postChatHistoryApi, updateChatHistoryAnswersApi } from \"../../features/ChatHistory/services/chatHistoryApi\";\r\nimport { onExportExcel, onExportWord } from \"../answersToFile\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\n\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { DeveloperSettings } from \"../../components/DeveloperSettingsPanel\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\n\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { UploadFile } from \"../../components/UploadFile\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\n\r\nimport { LoginContext } from \"../../loginContext\";\r\nimport { useOutletContext } from \"react-router-dom\";\r\nimport { useChatManager } from \"../../contextProviderChat\";\r\nimport { marked } from \"marked\";\r\nimport { PromptMenu } from \"../../features/PromptDatabase/components/PromptMenu\";\r\nimport { useMenuSelected } from \"../../features/PromptDatabase/hooks/menuSelected\";\r\nimport { useGetPrompts, usePromptPlaceholder } from \"../../features/PromptDatabase/hooks/useLoadPrompts\";\r\nimport { useUpdateUserPrompts } from \"../../features/PromptDatabase/hooks/useUpdateUserPrompt\";\r\nimport { SavePromptMenu } from \"../../features/PromptDatabase/components/SavePromptMenu\";\r\nimport { useChatConfig } from \"../../hooks/useChatConfig\";\r\nimport { useGptModelConfig } from \"../../hooks/useGptModelConfig\";\r\nimport { menuPositionLeft, menuPositionUnderneath, useOpenCloseMenu } from \"../../components/Menus\";\r\nlet counter = 0;\r\n\r\nexport const Chat = () => {\r\n    counter++;\r\n    console.log(\"counter\", counter);\r\n    const context = useOutletContext();\r\n    const { instance } = useMsal();\r\n    const { t } = useTranslation();\r\n\r\n    const { onChatStart } = useOutletContext<{ onChatStart: (isChatEmpty: boolean) => void }>();\r\n    const menuRef = useRef<HTMLDivElement>();\r\n    const { toggleLoadPromptMenu, buttonRefDropdownMenu, isDropdownMenuOpen } = useOpenCloseMenu(menuRef);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const {\r\n        chatId,\r\n        answers,\r\n        streamedAnswers,\r\n        setChatId,\r\n        setAnswers,\r\n        setStreamedAnswers,\r\n        allSidebarChats,\r\n        updateSidebarChats,\r\n        isConfigPanelOpen,\r\n        setIsConfigPanelOpen\r\n    } = useChatManager();\r\n    const { retrievalMode, chatConfig, setChatConfig } = useChatConfig();\r\n    const { gptModelConfig, updateGptModelConfig } = useGptModelConfig();\r\n\r\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\r\n\r\n    const isPageVisibleRef = useRef(!document.hidden);\r\n\r\n    useEffect(() => {\r\n        const handleVisibilityChange = () => {\r\n            isPageVisibleRef.current = !document.hidden;\r\n        };\r\n        document.addEventListener(\"visibilitychange\", handleVisibilityChange);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"visibilitychange\", handleVisibilityChange);\r\n        };\r\n    }, []);\r\n\r\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], responseBody: ReadableStream<any>) => {\r\n        let answer: string = \"\";\r\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\r\n\r\n        const updateState = (newContent: string) => {\r\n            return new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    answer += newContent;\r\n                    const latestResponse: ChatAppResponse = {\r\n                        ...askResponse,\r\n                        message: { content: answer, role: askResponse.message.role }\r\n                    };\r\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\r\n                    resolve(null);\r\n                }, 33);\r\n            });\r\n        };\r\n        try {\r\n            setIsStreaming(true);\r\n            var runningText = \"\";\r\n            var maxTextLen = 5;\r\n            for await (const event of readNDJSONStream(responseBody)) {\r\n                if (event[\"context\"] && event[\"context\"][\"data_points\"]) {\r\n                    event[\"message\"] = event[\"delta\"];\r\n                    askResponse = event as ChatAppResponse;\r\n                } else if (event[\"delta\"][\"content\"]) {\r\n                    setIsLoading(false);\r\n                    runningText += event[\"delta\"][\"content\"];\r\n                    // increase maxTextLen based on page visibility bc when off the page JS code gets throttled so start to gather larger chunks of text per update\r\n                    maxTextLen = isPageVisibleRef.current ? 5 : 100;\r\n                    if (runningText.length > maxTextLen) {\r\n                        await updateState(runningText);\r\n                        runningText = \"\";\r\n                    }\r\n                } else if (event[\"context\"]) {\r\n                    // Update context with new keys from latest event\r\n                    askResponse.context = { ...askResponse.context, ...event[\"context\"] };\r\n                } else if (event[\"error\"]) {\r\n                    throw Error(event[\"error\"]);\r\n                }\r\n            }\r\n            if (runningText.length > 0) {\r\n                await updateState(runningText);\r\n                runningText = \"\";\r\n            }\r\n        } finally {\r\n            setIsStreaming(false);\r\n        }\r\n        const fullResponse: ChatAppResponse = {\r\n            ...askResponse,\r\n            message: { content: answer, role: askResponse.message.role }\r\n        };\r\n        return fullResponse;\r\n    };\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n    const { loggedIn } = useContext(LoginContext);\r\n\r\n    useEffect(() => {\r\n        const updateLastQuestionFromNewlyLoadedChat = () => {\r\n            lastQuestionRef.current = answers?.length > 0 ? answers[answers?.length - 1][0] : \"\";\r\n        };\r\n        updateLastQuestionFromNewlyLoadedChat();\r\n    }, [chatId]);\r\n\r\n    const { onlyGlobalPrompts, onlyUserPrompts, getPrompts } = useGetPrompts(instance, loggedIn);\r\n    const { savePromptButtonRef, openSavePromptMenu, setOpenSavePromptMenu, handleSavePrompt, deleteUserPrompt } = useUpdateUserPrompts(instance, getPrompts);\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    const { placeholder, setPlaceholder, setPreviousQuestion, handlePromptClick, handlePromptHovered, handlePromptUnhovered } = usePromptPlaceholder(\r\n        question,\r\n        setQuestion\r\n    );\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        console.log(\"User Question:\", question); // Debugging\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const messages: ResponseMessage[] = answers.flatMap(a => [\r\n                { content: a[0], role: \"user\" },\r\n                { content: a[1].message.content, role: \"assistant\" }\r\n            ]);\r\n\r\n            const request: ChatAppRequest = {\r\n                messages: [...messages, { content: question, role: \"user\" }],\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: gptModelConfig.promptTemplate.length === 0 ? undefined : gptModelConfig.promptTemplate,\r\n                        exclude_category: gptModelConfig.excludeCategory.length === 0 ? undefined : gptModelConfig.excludeCategory,\r\n                        top: gptModelConfig.retrieveCount,\r\n                        temperature: gptModelConfig.temperature,\r\n                        minimum_reranker_score: gptModelConfig.minimumRerankerScore,\r\n                        minimum_search_score: gptModelConfig.minimumSearchScore,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: chatConfig.useSemanticRanker,\r\n                        semantic_captions: gptModelConfig.useSemanticCaptions,\r\n                        suggest_followup_questions: gptModelConfig.useSuggestFollowupQuestions,\r\n                        use_oid_security_filter: gptModelConfig.useOidSecurityFilter,\r\n                        use_groups_security_filter: gptModelConfig.useGroupsSecurityFilter,\r\n                        vector_fields: gptModelConfig.vectorFieldList,\r\n                        use_gpt4v: gptModelConfig.useGPT4V,\r\n                        gpt4v_input: gptModelConfig.gpt4vInput,\r\n                        ...(gptModelConfig.seed !== null ? { seed: gptModelConfig.seed } : {})\r\n                    },\r\n                    chatId: chatId\r\n                },\r\n                session_state: answers?.length ? answers[answers?.length - 1][1].session_state : null\r\n            };\r\n\r\n            console.log(\"Request Payload:\", request); // Debugging\r\n            const response = await chatApi(request, gptModelConfig.shouldStream, token);\r\n            console.log(\"Got response from chat api\");\r\n            console.log(response);\r\n\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n\r\n            if (gptModelConfig.shouldStream) {\r\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, response.body);\r\n                setAnswers([...answers, [question, parsedResponse]]);\r\n            } else {\r\n                const parsedResponse: ChatAppResponseOrError = await response.json();\r\n                if (response.status > 299 || !response.ok) {\r\n                    throw Error(parsedResponse.error || \"Unknown error\");\r\n                }\r\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (answers?.length > 0) {\r\n            onChatStart(false);\r\n        }\r\n    }, [answers]);\r\n\r\n    const clearChat = () => {\r\n        onChatStart(true); // Informiere das Layout, dass der Chat leer ist\r\n        lastQuestionRef.current = \"\";\r\n        setChatId(\"\");\r\n        setAnswers([]);\r\n        setStreamedAnswers([]);\r\n        setIsLoading(false);\r\n        setIsStreaming(false);\r\n        setQuestion(\"\");\r\n        setPreviousQuestion(\"\");\r\n        setPlaceholder(t(\"defaultExamples.placeholder\"));\r\n    };\r\n\r\n    useEffect(() => {\r\n        const chatsToDb = async () => {\r\n            try {\r\n                const token = client ? await getToken(client) : undefined;\r\n                if (!token) {\r\n                    throw new Error(\"No authentication token available\");\r\n                }\r\n                if (!Object.keys(allSidebarChats).includes(chatId)) {\r\n                    const chat = await postChatHistoryApi(token, chatId, answers);\r\n                    updateSidebarChats(chat);\r\n                } else {\r\n                    console.log(\"id found in allSidebarChats\");\r\n                    console.log(Object.keys(allSidebarChats));\r\n                    console.log(chatId);\r\n                    await updateChatHistoryAnswersApi(token, chatId, answers, allSidebarChats[chatId].title);\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        if (!chatId) {\r\n            let _chatId = uuidv4();\r\n            console.log(\"Chat ID:\", _chatId);\r\n            setChatId(_chatId);\r\n        }\r\n        if (answers?.length > 0) {\r\n            console.log(\"updating DB\");\r\n            chatsToDb();\r\n        }\r\n    }, [answers]);\r\n\r\n    const chatContainerRef = useRef<HTMLDivElement | null>(null);\r\n    const [isUserAtBottom, setIsUserAtBottom] = useState(true);\r\n    useEffect(() => {\r\n        const chatContainer = chatContainerRef.current;\r\n\r\n        const handleScroll = () => {\r\n            if (chatContainer) {\r\n                const { scrollTop, scrollHeight, clientHeight } = chatContainer;\r\n                // Check if user is at the bottom (or very close to it)\r\n                setIsUserAtBottom(scrollHeight - scrollTop <= clientHeight + 1);\r\n            }\r\n        };\r\n\r\n        // Attach scroll event listener\r\n        chatContainer?.addEventListener(\"scroll\", handleScroll);\r\n\r\n        // Cleanup listener on unmount\r\n        return () => chatContainer?.removeEventListener(\"scroll\", handleScroll);\r\n    }, [streamedAnswers]);\r\n\r\n    useEffect(() => {\r\n        chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [isLoading]);\r\n    useEffect(() => {\r\n        isUserAtBottom ? chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }) : null;\r\n    }, [streamedAnswers]);\r\n\r\n    useEffect(() => {\r\n        // Benachrichtige das Layout, wenn der Chat aktiv wird\r\n        if (lastQuestionRef.current) {\r\n            onChatStart(false);\r\n        }\r\n    }, [lastQuestionRef.current]);\r\n\r\n    useEffect(() => {\r\n        if (answers && chatConfig.showSpeechOutputAzure) {\r\n            // For each answer that is missing a speech URL, fetch the speech URL\r\n            for (let i = 0; i < answers?.length; i++) {\r\n                if (!speechUrls[i]) {\r\n                    getSpeechApi(answers[i][1].message.content).then(speechUrl => {\r\n                        setSpeechUrls([...speechUrls.slice(0, i), speechUrl, ...speechUrls.slice(i + 1)]);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }, [answers]);\r\n\r\n    const onCopyAnswer = async (answer: ChatAppResponse) => {\r\n        await navigator.clipboard.writeText(answer.message.content);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        console.log(\"index\");\r\n        console.log(index);\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const { menuSectionSelected, toggleMenuSection } = useMenuSelected();\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Helmet>\r\n                <title>{t(\"pageTitle\")}</title>\r\n            </Helmet>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer} style={activeAnalysisPanelTab ? { marginLeft: \"1rem\", marginRight: \"1rem\" } : { margin: \"0\" }}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            <img\r\n                                src=\"https://stchatbothostprodeuw001.blob.core.windows.net/publiccontent/GSK42_Logo_RGB.png\"\r\n                                alt=\"Chat logo\"\r\n                                aria-hidden=\"true\"\r\n                                width=\"45%\"\r\n                                className={styles.gskLogo}\r\n                            />\r\n                            <h1 className={styles.chatEmptyStateSubtitle}>{t(\"chatEmptyStateSubtitle\")}</h1>\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream} ref={chatContainerRef}>\r\n                            {isStreaming &&\r\n                                streamedAnswers.map((streamedAnswer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={streamedAnswer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={true}\r\n                                                key={index}\r\n                                                answer={streamedAnswer[1]}\r\n                                                isSelected={false}\r\n                                                onExportWordClicked={() => onExportWord(streamedAnswer[1])}\r\n                                                onExportExcelClicked={() => onExportExcel(streamedAnswer[1])}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onCopyClicked={() => onCopyAnswer(streamedAnswer[1])}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={gptModelConfig.useSuggestFollowupQuestions && answers?.length - 1 === index}\r\n                                                showSpeechOutputAzure={chatConfig.showSpeechOutputAzure}\r\n                                                showSpeechOutputBrowser={chatConfig.showSpeechOutputBrowser}\r\n                                                speechUrl={speechUrls[index]}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {!isStreaming &&\r\n                                answers?.map((answer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={answer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={false}\r\n                                                key={index}\r\n                                                answer={answer[1]}\r\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                                onExportWordClicked={() => onExportWord(answer[1])}\r\n                                                onExportExcelClicked={() => onExportExcel(answer[1])}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onCopyClicked={() => onCopyAnswer(answer[1])}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={gptModelConfig.useSuggestFollowupQuestions && answers?.length - 1 === index}\r\n                                                showSpeechOutputAzure={chatConfig.showSpeechOutputAzure}\r\n                                                showSpeechOutputBrowser={chatConfig.showSpeechOutputBrowser}\r\n                                                speechUrl={speechUrls[index]}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput} style={{ position: !lastQuestionRef.current || activeAnalysisPanelTab ? \"static\" : \"absolute\" }}>\r\n                        <div className={styles.commandsContainer}>\r\n                            <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                            <UploadFile className={styles.commandButton} disabled={!loggedIn} />\r\n                        </div>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            handlePlaceholder={setPlaceholder}\r\n                            placeholder={placeholder}\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                            showSpeechInput={chatConfig.showSpeechInput}\r\n                            toggleLoadPromptMenu={toggleLoadPromptMenu}\r\n                            loadPromptButtonRef={buttonRefDropdownMenu}\r\n                            toggleSavePromptMenu={() => {\r\n                                setOpenSavePromptMenu(!openSavePromptMenu);\r\n                            }}\r\n                            savePromptButtonRef={savePromptButtonRef}\r\n                            questionHandler={setQuestion}\r\n                            question={question}\r\n                        />\r\n                    </div>\r\n                    {isDropdownMenuOpen && onlyGlobalPrompts && onlyUserPrompts && (\r\n                        <PromptMenu\r\n                            userPrompts={onlyUserPrompts}\r\n                            globalPrompts={onlyGlobalPrompts}\r\n                            handlePromptClick={handlePromptClick}\r\n                            handlePromptHovered={handlePromptHovered}\r\n                            handlePromptUnhovered={handlePromptUnhovered}\r\n                            menuRef={menuRef}\r\n                            toggleMenuSection={toggleMenuSection}\r\n                            menuSectionSelected={menuSectionSelected}\r\n                            deleteUserPrompt={deleteUserPrompt}\r\n                            getMenuPosition={\r\n                                !lastQuestionRef.current\r\n                                    ? () => menuPositionUnderneath(buttonRefDropdownMenu.current)\r\n                                    : () => menuPositionLeft(buttonRefDropdownMenu.current)\r\n                            }\r\n                        />\r\n                    )}\r\n                    {openSavePromptMenu && (\r\n                        <SavePromptMenu onSave={handleSavePrompt} onClose={() => setOpenSavePromptMenu(false)} reloadUserPrompts={() => getPrompts(\"user\")} />\r\n                    )}\r\n                </div>\r\n\r\n                {answers?.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <DeveloperSettings\r\n                    isConfigPanelOpen={isConfigPanelOpen}\r\n                    gptConfig={gptModelConfig}\r\n                    optionsConfig={chatConfig}\r\n                    retrievalMode={retrievalMode}\r\n                    setIsConfigPanelOpen={setIsConfigPanelOpen}\r\n                    setChatConfig={setChatConfig}\r\n                    updatePropertyGptConfig={updateGptModelConfig}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { DefaultButton } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./LoginButton.module.css\";\r\nimport { getRedirectUri, loginRequest, appServicesLogout, getUsername, checkLoggedIn } from \"../../authConfig\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { LoginContext } from \"../../loginContext\";\r\n\r\nexport const LoginButton = () => {\r\n    const { instance } = useMsal();\r\n    const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n    const activeAccount = instance.getActiveAccount();\r\n    const [username, setUsername] = useState(\"\");\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        const fetchUsername = async () => {\r\n            setUsername((await getUsername(instance)) ?? \"\");\r\n        };\r\n\r\n        fetchUsername();\r\n    }, []);\r\n\r\n    const handleLoginPopup = () => {\r\n        /**\r\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\r\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\r\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\r\n         */\r\n        instance\r\n            .loginPopup({\r\n                ...loginRequest,\r\n                redirectUri: getRedirectUri()\r\n            })\r\n            .catch(error => console.log(error))\r\n            .then(async () => {\r\n                setLoggedIn(await checkLoggedIn(instance));\r\n                setUsername((await getUsername(instance)) ?? \"\");\r\n            });\r\n    };\r\n    const handleLogoutPopup = () => {\r\n        if (activeAccount) {\r\n            instance\r\n                .logoutPopup({\r\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\r\n                    account: instance.getActiveAccount()\r\n                })\r\n                .catch(error => console.log(error))\r\n                .then(async () => {\r\n                    setLoggedIn(await checkLoggedIn(instance));\r\n                    setUsername((await getUsername(instance)) ?? \"\");\r\n                });\r\n        } else {\r\n            appServicesLogout();\r\n        }\r\n    };\r\n    return (\r\n        <DefaultButton\r\n            text={loggedIn ? `${t(\"logout\")}\\n${username}` : `${t(\"login\")}`}\r\n            className={styles.loginButton}\r\n            onClick={loggedIn ? handleLogoutPopup : handleLoginPopup}\r\n        ></DefaultButton>\r\n    );\r\n};\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { IDropdownOption, Dropdown } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\n\r\nimport { supportedLngs } from \"./config\";\r\nimport styles from \"./LocaleSwitcher.module.css\";\r\n\r\ninterface Props {\r\n    onLanguageChange: (language: string) => void;\r\n}\r\n\r\n// Mapping Sprachcode -> Ländercode (Flaggen)\r\nconst languageToCountryCode: Record<string, string> = {\r\n    en: \"us\",\r\n    de: \"de\",\r\n    fr: \"fr\"\r\n    // Füge weitere Sprachcodes hier hinzu\r\n};\r\n\r\nexport const LocaleSwitcher = ({ onLanguageChange }: Props) => {\r\n    const { i18n } = useTranslation();\r\n\r\n    const handleLanguageChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<string> | undefined) => {\r\n        onLanguageChange(option?.data || i18n.language);\r\n    };\r\n\r\n    const localeSwitcherId = useId(\"localSwitcher\");\r\n    const { t } = useTranslation();\r\n\r\n    // Aktueller Ländercode für die Flagge\r\n    const currentCountryCode = languageToCountryCode[i18n.language] || i18n.language;\r\n\r\n    return (\r\n        <div className={styles.localeSwitcher}>\r\n            <img src={`https://flagcdn.com/h40/${currentCountryCode}.png`} alt={`${i18n.language} flag`} className={styles.localeFlag} />\r\n            <Dropdown\r\n                id={localeSwitcherId}\r\n                selectedKey={i18n.language}\r\n                options={Object.entries(supportedLngs).map(([code, details]) => ({\r\n                    key: code,\r\n                    text: details.name,\r\n                    selected: code === i18n.language,\r\n                    data: code\r\n                }))}\r\n                onChange={handleLanguageChange}\r\n                ariaLabel={t(\"labels.languagePicker\")}\r\n                placeholder={t(\"labels.selectLanguage\")}\r\n                className={styles.customDropdown}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import { useMsal } from \"@azure/msal-react\";\nimport { useRef, useState } from \"react\";\nimport styles from \"./ChatHistory.module.css\";\nimport { Stack } from \"@fluentui/react\";\nimport { Button } from \"@fluentui/react-components\";\nimport { useChatManager } from \"../../../../contextProviderChat\";\nimport { getToken } from \"../../../../authConfig\";\nimport { deleteSingleChatHistoryApi, getSingleChatHistoryApi, updateChatHistoryTitleApi } from \"../../services/chatHistoryApi\";\nimport { ThreeDotsOptionButton } from \"../../../../components/Buttons\";\nimport { DropDownMenu, menuPositionUnderneath, useOpenCloseMenu } from \"../../../../components/Menus\";\nimport { ClickableTextItem } from \"../../../../components/ClickableTextItem\";\nimport { ChatHistoryDbResponse } from \"../../models\";\nimport { useTranslation } from \"react-i18next\";\nimport { deleteUploadedFileApi } from \"../../../../api\";\n\ninterface Props {\n    pastChat: ChatHistoryDbResponse;\n    files: string[];\n}\n\nexport const ChatHistoryItem = ({ pastChat, files }: Props) => {\n    const { t } = useTranslation();\n    const { setChatId, setAnswers, setStreamedAnswers, allSidebarChats, setAllSidebarChats } = useChatManager();\n    const { instance } = useMsal();\n    const chatButtonRef = useRef<HTMLDivElement>(null);\n    const [isEdit, setIsEdit] = useState(false);\n    const [title, setTitle] = useState(pastChat.title?.replace(/\"/g, \"\"));\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const menuRef = useRef<HTMLDivElement>();\n    const { toggleLoadPromptMenu, buttonRefDropdownMenu, isDropdownMenuOpen } = useOpenCloseMenu(menuRef);\n\n    const deleteChat = async () => {\n        const newChats = { ...allSidebarChats };\n        delete newChats[pastChat.id];\n        setAllSidebarChats(newChats);\n        const token = await getToken(instance);\n        if (!token) {\n            throw new Error(\"No authentication token available\");\n        }\n        const resp = await deleteSingleChatHistoryApi(token, pastChat.id);\n        if (!resp.ok) {\n            throw new Error(resp.statusText);\n        } else {\n            files.forEach(file => deleteUploadedFileApi(file, pastChat.id, token));\n        }\n    };\n\n    const getChatMessages = async () => {\n        try {\n            const token = await getToken(instance);\n            if (!token) {\n                throw new Error(\"No authentication token available\");\n            }\n            const chats = await getSingleChatHistoryApi(token, pastChat.id);\n            setAnswers(chats[0].answers);\n            setStreamedAnswers(chats[0].answers);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const updateChatTitle = async () => {\n        try {\n            const token = await getToken(instance);\n            if (!token) {\n                throw new Error(\"No authentication token available\");\n            }\n            const updatedChat = await updateChatHistoryTitleApi(token, pastChat.id, title);\n            const newChats = { ...allSidebarChats, [pastChat.id]: updatedChat };\n            setAllSidebarChats(newChats);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const handleClickOnHistory = async () => {\n        await getChatMessages();\n        setChatId(pastChat.id);\n    };\n\n    // Handle clicking the \"Change title\" option\n    const handleEdit = () => {\n        setIsEdit(true);\n        setTimeout(() => inputRef.current?.focus(), 0); // Focus on input\n    };\n\n    const handleBlurOrEnter = () => {\n        setIsEdit(false);\n        console.log(\"Sending title to backend\", title);\n        updateChatTitle();\n    };\n\n    const changeTitleInFrontend = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.target.value);\n    };\n\n    return (\n        <Stack.Item className={styles.chatHistoryItem}>\n            <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", width: \"100%\" }}>\n                <Button\n                    onClick={isEdit ? undefined : handleClickOnHistory}\n                    style={{\n                        padding: \"0\",\n                        minWidth: \"0\",\n                        width: \"100%\",\n                        height: \"auto\",\n                        textAlign: \"left\"\n                    }}\n                >\n                    <div style={{ display: \"flex\", alignItems: \"center\", width: \"100%\" }} ref={chatButtonRef}>\n                        <img src=\"./chat-conversation.svg\" alt=\"Chat Bot Icon\" className={styles.chatIcon} />\n                        {isEdit ? (\n                            <input\n                                ref={inputRef}\n                                type=\"text\"\n                                value={title}\n                                onChange={changeTitleInFrontend}\n                                onBlur={handleBlurOrEnter}\n                                onKeyDown={e => e.key === \"Enter\" && handleBlurOrEnter()}\n                                className=\"border rounded p-1 focus:outline-none\"\n                            />\n                        ) : (\n                            <span className={styles.chatHistoryTitle}>{title}</span>\n                        )}\n                        {files.length > 0 ? <img src=\"./attachment.svg\" alt=\"File Attachment Icon\" className={styles.chatIcon} /> : <></>}\n                    </div>\n                </Button>\n                <ThreeDotsOptionButton toggleLoadPromptMenu={toggleLoadPromptMenu} buttonRefDropdownMenu={buttonRefDropdownMenu} />\n            </div>\n            {isDropdownMenuOpen ? (\n                <DropDownMenu\n                    className={styles.chatItemOptions}\n                    menuRef={menuRef}\n                    getMenuPosition={() => menuPositionUnderneath(buttonRefDropdownMenu.current)}\n                >\n                    <ClickableTextItem onClick={handleEdit} key={`${pastChat.id}_update`} className={styles.chatHistoryChangeTitle}>\n                        {t(\"updateTitle\")}\n                    </ClickableTextItem>\n\n                    <ClickableTextItem\n                        onClick={() => {\n                            deleteChat().catch(error => console.error(\"Error deleting chat:\", error));\n                        }}\n                        key={`${pastChat.id}_delete`}\n                        className={styles.chatHistoryDeleteButton}\n                    >\n                        {t(\"delete\")}\n                    </ClickableTextItem>\n                </DropDownMenu>\n            ) : (\n                <></>\n            )}\n        </Stack.Item>\n    );\n};\n","// PasswordModal.tsx\r\nimport React, { useState } from \"react\";\r\nimport Modal from \"react-modal\";\r\nimport styles from \"./PasswordModal.module.css\";\r\n\r\ninterface PasswordModalProps {\r\n    isOpen: boolean;\r\n    onRequestClose: () => void;\r\n    onPasswordSubmit: (password: string) => void;\r\n}\r\n\r\nexport const PasswordModal = ({ isOpen, onRequestClose, onPasswordSubmit }: PasswordModalProps) => {\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        onPasswordSubmit(password);\r\n    };\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} onRequestClose={onRequestClose} contentLabel=\"Password Modal\">\r\n            <div className={styles.modalContent}>\r\n                <h2>Passwort eingeben:</h2>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input type=\"password\" value={password} onChange={e => setPassword(e.target.value)} className={styles.input} />\r\n                    <button type=\"submit\" className={styles.button}>\r\n                        Bestätigen\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n","// SettingsButton.tsx\r\nimport React, { useState } from \"react\";\r\nimport { Settings24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { PasswordModal } from \"./PasswordModal\";\r\nimport styles from \"./SettingsButton.module.css\";\r\nimport { t } from \"i18next\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const handleButtonClick = () => {\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handlePasswordSubmit = (password: string) => {\r\n        if (password === \"GSK1234!\") {\r\n            // replace with ne password\r\n            setIsModalOpen(false);\r\n            onClick();\r\n        } else {\r\n            alert(\"Falsches Passwort\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Settings24Regular />} onClick={handleButtonClick}>\r\n                {t(\"developerSettings\")}\r\n            </Button>\r\n            <PasswordModal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)} onPasswordSubmit={handlePasswordSubmit} />\r\n        </div>\r\n    );\r\n};\r\n","import { ChatAppResponse } from \"../../api\";\n\nexport enum HistoryRetrievedCodes {\n    PENDING,\n    SUCCESS,\n    SUCCESS_EMPTY,\n    FAILED\n}\n\nexport type ConversationChatHistoryDbResponse = {\n    id: string;\n    answers: [user: string, response: ChatAppResponse][];\n};\n\nexport type ChatHistoryDbResponse = {\n    id: string;\n    title: string;\n    _ts: number;\n};\n","import { useState } from \"react\";\nimport { ChatHistoryDbResponse, HistoryRetrievedCodes } from \"../models\";\nimport { getToken } from \"../../../authConfig\";\nimport { getCompleteChatHistorySingleUserApi } from \"../services/chatHistoryApi\";\nimport { chatListToObject, ChatState } from \"../../../contextProviderChat\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { listAllUploadedFilesApi } from \"../../../api\";\n\nexport function categorizeTimestamps(chatHistory: ChatHistoryDbResponse[]) {\n    var chatsToday: ChatHistoryDbResponse[] = [];\n    var chatsLastWeek: ChatHistoryDbResponse[] = [];\n    var chatsOlder: ChatHistoryDbResponse[] = [];\n\n    const now = new Date();\n    const startOfToday = now.setHours(0, 0, 0, 0) / 1000;\n    const oneDay = 24 * 60 * 60; // seconds in a day\n    const startOfLastWeek = startOfToday - 7 * oneDay;\n\n    chatHistory.forEach(chat => {\n        if (chat._ts >= startOfToday) {\n            chatsToday.push(chat);\n        } else if (chat._ts >= startOfLastWeek && chat._ts < startOfToday) {\n            chatsLastWeek.push(chat);\n        } else {\n            chatsOlder.push(chat);\n        }\n    });\n    chatsToday.sort((a, b) => b._ts - a._ts);\n\n    const categories = {\n        today: chatsToday,\n        lastWeek: chatsLastWeek,\n        older: chatsOlder\n    };\n\n    return categories;\n}\n\nexport const useChatHistory = (setAllSidebarChats: (chats: ChatState) => void, setAllFiles: (files: Record<string, string[]>) => void) => {\n    const { instance } = useMsal();\n    const [historyRetrieved, setHistoryRetrieved] = useState<HistoryRetrievedCodes>(HistoryRetrievedCodes.PENDING);\n    const [pastChatsCategorized, setPastChatsCategorized] = useState<Record<string, ChatHistoryDbResponse[]> | undefined>(undefined);\n\n    const categorizeChats = (chats: ChatHistoryDbResponse[]) => {\n        setPastChatsCategorized(categorizeTimestamps(chats));\n        if (chats.length === 0) {\n            setHistoryRetrieved(HistoryRetrievedCodes.SUCCESS_EMPTY);\n        } else {\n            setHistoryRetrieved(HistoryRetrievedCodes.SUCCESS);\n        }\n    };\n\n    const getChatsOfUser = async () => {\n        setHistoryRetrieved(HistoryRetrievedCodes.PENDING);\n        try {\n            const token = await getToken(instance);\n            if (!token) {\n                setHistoryRetrieved(HistoryRetrievedCodes.FAILED);\n                throw new Error(\"No authentication token available\");\n            }\n            const chats = await getCompleteChatHistorySingleUserApi(token);\n            setAllSidebarChats(chatListToObject(chats));\n            categorizeChats(chats);\n        } catch (error) {\n            setHistoryRetrieved(HistoryRetrievedCodes.FAILED);\n            console.error(error);\n        }\n    };\n\n    const getFilesOfUserChats = async () => {\n        try {\n            const token = await getToken(instance);\n            if (token) {\n                const allFiles = await listAllUploadedFilesApi(token);\n                setAllFiles(allFiles);\n            } else {\n                throw new Error(\"No authentication token available\");\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    return { getChatsOfUser, getFilesOfUserChats, categorizeChats, historyRetrieved, pastChatsCategorized };\n};\n","import { useMsal } from \"@azure/msal-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useState, useEffect, useContext } from \"react\";\nimport styles from \"./ChatHistory.module.css\";\nimport { Stack, Spinner } from \"@fluentui/react\";\nimport { ChatHistoryItem } from \"./ChatHistoryItem\";\nimport { LoginContext } from \"../../../../loginContext\";\nimport { AllFiles, useChatManager } from \"../../../../contextProviderChat\";\nimport { adminUserEnvVarApi } from \"../../../../api/api\";\nimport { getUsername } from \"../../../../authConfig\";\nimport { SettingsButton } from \"../../../../components/SettingsButton\";\nimport { useChatHistory } from \"../../hooks/useChatHistory\";\nimport { ChatHistoryDbResponse, HistoryRetrievedCodes } from \"../../models\";\n\ninterface HistorySectionProps {\n    chats: ChatHistoryDbResponse[];\n    sectionTitle: string;\n    files: AllFiles;\n}\n\nconst ChatHistorySection = ({ chats, sectionTitle, files }: HistorySectionProps) => {\n    return (\n        <div className={styles.chatHistorySection}>\n            <p className={styles.chatHistorySectionTitle}>{sectionTitle}</p>\n            <Stack tokens={{ childrenGap: 10 }}>\n                {chats.map((chat, index) => (\n                    <ChatHistoryItem key={chat.id} pastChat={chat} files={files[chat.id] ?? []} />\n                ))}\n            </Stack>\n        </div>\n    );\n};\n\nexport const ChatHistory = () => {\n    const { loggedIn } = useContext(LoginContext);\n    const { t } = useTranslation();\n    const { instance } = useMsal();\n    const { allSidebarChats, setAllSidebarChats, allFiles, setAllFiles, setIsConfigPanelOpen, isConfigPanelOpen } = useChatManager();\n    const [username, setUsername] = useState(\"\");\n    const [isUserAdmin, setIsUserAdmin] = useState<boolean>(false);\n    const { getChatsOfUser, getFilesOfUserChats, categorizeChats, historyRetrieved, pastChatsCategorized } = useChatHistory(setAllSidebarChats, setAllFiles);\n\n    useEffect(() => {\n        const checkAdmin = async () => {\n            const adminUser = await adminUserEnvVarApi();\n            console.log(\"adminUser: \", adminUser);\n            console.log(\"username: \", username);\n            setIsUserAdmin(username === adminUser.user);\n        };\n        if (username) {\n            checkAdmin();\n        }\n    }, [username]);\n\n    useEffect(() => {\n        console.log(\"IS USER ADMIN changed\", isUserAdmin);\n    }, [isUserAdmin]);\n\n    useEffect(() => {\n        const fetchUsername = async () => {\n            setUsername((await getUsername(instance)) ?? \"\");\n        };\n        if (loggedIn) {\n            console.log(\"logged in getting username for chat history\");\n            fetchUsername();\n            getChatsOfUser();\n            getFilesOfUserChats();\n        }\n    }, [loggedIn]);\n\n    // when new chats come in (from a user asking a new question in an empty chat) we need to categorize it so it goes to the correct section of the history\n    // other potential change in allSidebarChats can come from deleting a chat, in which case we also need to\n    useEffect(() => {\n        categorizeChats(Object.values(allSidebarChats));\n    }, [allSidebarChats]);\n\n    return (\n        <div className={styles.containerStyle}>\n            <div className={styles.headerCompanyLogoPosition}>\n                <img\n                    src=\"https://stchatbothostprodeuw001.blob.core.windows.net/publiccontent/GSK42_Logo_RGB.png\"\n                    alt=\"Chat logo in header\"\n                    className={styles.headerLogo}\n                />\n            </div>\n            <div className={styles.chatsContainer}>\n                {historyRetrieved === HistoryRetrievedCodes.SUCCESS && pastChatsCategorized ? (\n                    <>\n                        {pastChatsCategorized.today.length > 0 ? (\n                            <ChatHistorySection sectionTitle={t(\"chatHistory.today\")} chats={pastChatsCategorized.today} files={allFiles} />\n                        ) : (\n                            <></>\n                        )}\n                        {pastChatsCategorized.lastWeek.length > 0 ? (\n                            <ChatHistorySection sectionTitle={t(\"chatHistory.lastWeek\")} chats={pastChatsCategorized.lastWeek} files={allFiles} />\n                        ) : (\n                            <></>\n                        )}\n                        {pastChatsCategorized.older.length > 0 ? (\n                            <ChatHistorySection sectionTitle={t(\"chatHistory.older\")} chats={pastChatsCategorized.older} files={allFiles} />\n                        ) : (\n                            <></>\n                        )}\n                    </>\n                ) : historyRetrieved === HistoryRetrievedCodes.SUCCESS_EMPTY ? (\n                    <> </>\n                ) : historyRetrieved === HistoryRetrievedCodes.PENDING ? (\n                    <>\n                        <Spinner style={{ marginTop: \"1rem\", color: \"#00839b\" }} label={t(\"chatHistory.loadingHistory\")} />\n                    </>\n                ) : (\n                    <></>\n                )}\n            </div>\n            {isUserAdmin && <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />}\n        </div>\n    );\n};\n","import React, { useState, useEffect, useRef, RefObject } from \"react\";\r\nimport { Outlet } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./Layout.module.css\";\r\n\r\nimport { useLogin } from \"../../authConfig\";\r\nimport i18n from \"i18next\";\r\nimport { LoginButton } from \"../../components/LoginButton\";\r\nimport { IconButton } from \"@fluentui/react\";\r\nimport { LocaleSwitcher } from \"../../i18n/LocaleSwitcher\";\r\nimport { ChatHistory } from \"../../features/ChatHistory/components/ChatHistory\";\r\n\r\nconst Layout = () => {\r\n    const { t } = useTranslation();\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    const [isChatEmpty, setIsChatEmpty] = useState(true); // Zustand für Chat-Leerstatus\r\n\r\n    const menuRef: RefObject<HTMLDivElement> = useRef(null);\r\n\r\n    const toggleMenu = () => {\r\n        setMenuOpen(!menuOpen);\r\n    };\r\n\r\n    const handleChatStateChange = (isChatEmpty: boolean) => {\r\n        setIsChatEmpty(isChatEmpty);\r\n    };\r\n\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n            setMenuOpen(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (menuOpen) {\r\n            document.addEventListener(\"mousedown\", handleClickOutside);\r\n        } else {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        }\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [menuOpen]);\r\n\r\n    return (\r\n        <div className={styles.topLevelLayout}>\r\n            <ChatHistory />\r\n            <div className={styles.layout}>\r\n                <header className={styles.header} role={\"banner\"}>\r\n                    <div className={styles.headerContainer} ref={menuRef}>\r\n                        {/* Logo nur anzeigen, wenn Chat nicht leer ist */}\r\n                        <h4 className={styles.headerRightText}>powered by GPT4o Model Version 2024-08-06</h4>\r\n                        <LocaleSwitcher onLanguageChange={newLang => i18n.changeLanguage(newLang)} />\r\n                        <div className={styles.loginMenuContainer}>\r\n                            <IconButton\r\n                                iconProps={{ iconName: \"GlobalNavButton\" }}\r\n                                className={styles.menuToggle}\r\n                                onClick={toggleMenu}\r\n                                ariaLabel=\"Toggle menu\"\r\n                            />\r\n                            {useLogin && <LoginButton />}\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n\r\n                {/* Outlet gibt den Chat-Inhalt weiter */}\r\n                <Outlet context={{ onChatStart: handleChatStateChange }} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { AccountInfo, EventType, PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { checkLoggedIn, msalConfig, useLogin } from \"./authConfig\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { LoginContext } from \"./loginContext\";\r\nimport Layout from \"./pages/layout/Layout\";\r\n\r\nconst LayoutWrapper = () => {\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    if (useLogin) {\r\n        var msalInstance = new PublicClientApplication(msalConfig);\r\n\r\n        // Default to using the first account if no account is active on page load\r\n        if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\r\n            // Account selection logic is app dependent. Adjust as needed for different use cases.\r\n            msalInstance.setActiveAccount(msalInstance.getActiveAccount());\r\n        }\r\n\r\n        // Listen for sign-in event and set active account\r\n        msalInstance.addEventCallback(event => {\r\n            if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\r\n                const account = event.payload as AccountInfo;\r\n                msalInstance.setActiveAccount(account);\r\n            }\r\n        });\r\n\r\n        useEffect(() => {\r\n            const fetchLoggedIn = async () => {\r\n                setLoggedIn(await checkLoggedIn(msalInstance));\r\n            };\r\n\r\n            fetchLoggedIn();\r\n        }, []);\r\n\r\n        return (\r\n            <MsalProvider instance={msalInstance}>\r\n                <LoginContext.Provider\r\n                    value={{\r\n                        loggedIn,\r\n                        setLoggedIn\r\n                    }}\r\n                >\r\n                    <Layout />\r\n                </LoginContext.Provider>\r\n            </MsalProvider>\r\n        );\r\n    } else {\r\n        return (\r\n            <LoginContext.Provider\r\n                value={{\r\n                    loggedIn,\r\n                    setLoggedIn\r\n                }}\r\n            >\r\n                <Layout />\r\n            </LoginContext.Provider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default LayoutWrapper;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { PublicClientApplication, EventType, AccountInfo } from \"@azure/msal-browser\";\r\nimport { msalConfig, useLogin } from \"./authConfig\";\r\nimport { useState } from \"react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport { Chat } from \"./pages/chat/Chat\";\r\nimport { ChatManagerProvider } from \"./contextProviderChat\";\r\nimport LayoutWrapper from \"./layoutWrapper\";\r\n\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: (\r\n            <ChatManagerProvider>\r\n                <LayoutWrapper />\r\n            </ChatManagerProvider>\r\n        ),\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Chat />\r\n            },\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <RouterProvider router={router} />\r\n    </React.StrictMode>\r\n);\r\n"],"file":"assets/index-e610d143.js"}